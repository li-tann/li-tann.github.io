"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4390],{4283:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"code/cpp/triangle","title":"Triangle","description":"\u8be5\u6587\u6863\u6765\u6e90\u4e8etriangle -h\u6253\u5370\u7684\u4fe1\u606f, \u4ee5\u53catriangle.h\u7684\u6ce8\u91ca\u3002","source":"@site/docs/code/cpp/triangle.md","sourceDirName":"code/cpp","slug":"/code/cpp/triangle","permalink":"/docs/code/cpp/triangle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/cpp/triangle.md","tags":[],"version":"current","lastUpdatedBy":"litan_thinkPad","lastUpdatedAt":1737456727000,"frontMatter":{},"sidebar":"code","previous":{"title":"TinyXML","permalink":"/docs/code/cpp/tinyxml"},"next":{"title":"Cpp Qt","permalink":"/docs/category/cpp-qt"}}');var s=i(74848),r=i(28453);const a={},o="Triangle",l={},h=[{value:"triangle.h\u6ce8\u91ca\u6587\u6863",id:"triangleh\u6ce8\u91ca\u6587\u6863",level:2},{value:"\u7ed3\u6784\u4f53\u8bf4\u660e",id:"\u7ed3\u6784\u4f53\u8bf4\u660e",level:3},{value:"pointlist",id:"pointlist",level:4},{value:"pointattributelist",id:"pointattributelist",level:4},{value:"pointmarkerlist",id:"pointmarkerlist",level:4},{value:"trianglelist",id:"trianglelist",level:4},{value:"triangleattributelist",id:"triangleattributelist",level:4},{value:"trianglearealist",id:"trianglearealist",level:4},{value:"neighborlist",id:"neighborlist",level:4},{value:"segmentlist",id:"segmentlist",level:4},{value:"segmentmarkerlist",id:"segmentmarkerlist",level:4},{value:"holelist",id:"holelist",level:4},{value:"regionlist",id:"regionlist",level:4},{value:"edgelist",id:"edgelist",level:4},{value:"edgemarkerlist",id:"edgemarkerlist",level:4},{value:"normlist",id:"normlist",level:4},{value:"\u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e",id:"\u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e",level:4},{value:"\u7ed3\u6784\u4f53\u521d\u59cb\u5316",id:"\u7ed3\u6784\u4f53\u521d\u59cb\u5316",level:3},{value:"in",id:"in",level:4},{value:"out",id:"out",level:4},{value:"vorout",id:"vorout",level:4},{value:"triangle -h",id:"triangle--h",level:2},{value:"\u7248\u6743\u8bf4\u660e",id:"\u7248\u6743\u8bf4\u660e",level:3},{value:"\u529f\u80fd\u4ecb\u7ecd",id:"\u529f\u80fd\u4ecb\u7ecd",level:3},{value:"\u53c2\u6570\u8bf4\u660e",id:"\u53c2\u6570\u8bf4\u660e",level:3},{value:"\u6307\u4ee4\u7b80\u8ff0",id:"\u6307\u4ee4\u7b80\u8ff0",level:4},{value:"-p \u8bfb\u53d6poly\u6587\u4ef6",id:"-p-\u8bfb\u53d6poly\u6587\u4ef6",level:4},{value:"-r \u4f18\u5316\u9884\u8f93\u5165\u7f51\u683c",id:"-r-\u4f18\u5316\u9884\u8f93\u5165\u7f51\u683c",level:4},{value:"-q \u63d0\u5347\u7f51\u683c\u8d28\u91cf",id:"-q-\u63d0\u5347\u7f51\u683c\u8d28\u91cf",level:4},{value:"-a \u9650\u5236\u6700\u5927\u9762\u79ef",id:"-a-\u9650\u5236\u6700\u5927\u9762\u79ef",level:4},{value:"-u \u7ea6\u675f\u4e09\u89d2\u5f62\u5c3a\u5bf8",id:"-u-\u7ea6\u675f\u4e09\u89d2\u5f62\u5c3a\u5bf8",level:4},{value:"-A \u6d6e\u70b9\u5c5e\u6027",id:"-a-\u6d6e\u70b9\u5c5e\u6027",level:4},{value:"-c \u51f8\u5305\u7ebf\u6bb5",id:"-c-\u51f8\u5305\u7ebf\u6bb5",level:4},{value:"-D \u4e25\u5bc6\u4e09\u89d2\u5256\u5206",id:"-d-\u4e25\u5bc6\u4e09\u89d2\u5256\u5206",level:4},{value:"-j \u4e22\u5f03\u70b9",id:"-j-\u4e22\u5f03\u70b9",level:4},{value:"-e \u8f93\u51fa.edge",id:"-e-\u8f93\u51faedge",level:4},{value:"-v \u8f93\u51faVoronoi\u56fe",id:"-v-\u8f93\u51favoronoi\u56fe",level:4},{value:"-n \u8f93\u51fa.neigh",id:"-n-\u8f93\u51faneigh",level:4},{value:"-g \u8f93\u51fa.off",id:"-g-\u8f93\u51faoff",level:4},{value:"-B \u4e0d\u8f93\u51fa\u8fb9\u754c\u6807\u8bb0",id:"-b-\u4e0d\u8f93\u51fa\u8fb9\u754c\u6807\u8bb0",level:4},{value:"-P \u4e0d\u8f93\u51fa.poly",id:"-p-\u4e0d\u8f93\u51fapoly",level:4},{value:"-N \u4e0d\u8f93\u51fa.node",id:"-n-\u4e0d\u8f93\u51fanode",level:4},{value:"-E \u4e0d\u8f93\u51fa.ele",id:"-e-\u4e0d\u8f93\u51faele",level:4},{value:"-I \u65e0\u8fed\u4ee3\u6570",id:"-i-\u65e0\u8fed\u4ee3\u6570",level:4},{value:"-O \u65e0\u5b54\u6d1e",id:"-o-\u65e0\u5b54\u6d1e",level:4},{value:"-X \u964d\u4f4e\u7cbe\u5ea6",id:"-x-\u964d\u4f4e\u7cbe\u5ea6",level:4},{value:"-z \u4ece0\u7f16\u53f7",id:"-z-\u4ece0\u7f16\u53f7",level:4},{value:"-o2",id:"-o2",level:4},{value:"-Y \u8fb9\u754c\u4e0d\u751f\u6210\u65b0\u9876\u70b9",id:"-y-\u8fb9\u754c\u4e0d\u751f\u6210\u65b0\u9876\u70b9",level:4},{value:"-S Steiner\u70b9\u6570\u91cf",id:"-s-steiner\u70b9\u6570\u91cf",level:4},{value:"-i \u589e\u91cf\u7b97\u6cd5",id:"-i-\u589e\u91cf\u7b97\u6cd5",level:4},{value:"-F sweepline\u7b97\u6cd5",id:"-f-sweepline\u7b97\u6cd5",level:4},{value:"-l \u5782\u76f4\u5207\u5272",id:"-l-\u5782\u76f4\u5207\u5272",level:4},{value:"-s \u5206\u6bb5\u5206\u5272",id:"-s-\u5206\u6bb5\u5206\u5272",level:4},{value:"-C \u7f51\u683c\u4e00\u81f4\u6027",id:"-c-\u7f51\u683c\u4e00\u81f4\u6027",level:4},{value:"-Q \u9759\u9ed8\u6a21\u5f0f",id:"-q-\u9759\u9ed8\u6a21\u5f0f",level:4},{value:"-V \u8be6\u60c5",id:"-v-\u8be6\u60c5",level:4},{value:"\u5b9a\u4e49",id:"\u5b9a\u4e49",level:3},{value:"\u6587\u4ef6\u7c7b\u578b",id:"\u6587\u4ef6\u7c7b\u578b",level:3},{value:"\u901a\u7528\u683c\u5f0f\u8bf4\u660e",id:"\u901a\u7528\u683c\u5f0f\u8bf4\u660e",level:4},{value:"\u6587\u4ef6\u8bf4\u660e",id:"\u6587\u4ef6\u8bf4\u660e",level:4}];function d(e){const n={a:"a",admonition:"admonition",annotation:"annotation",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"triangle",children:"Triangle"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["\u8be5\u6587\u6863\u6765\u6e90\u4e8e",(0,s.jsx)(n.code,{children:"triangle -h"}),"\u6253\u5370\u7684\u4fe1\u606f, \u4ee5\u53ca",(0,s.jsx)(n.code,{children:"triangle.h"}),"\u7684\u6ce8\u91ca\u3002"]})}),"\n",(0,s.jsx)(n.h2,{id:"triangleh\u6ce8\u91ca\u6587\u6863",children:"triangle.h\u6ce8\u91ca\u6587\u6863"}),"\n",(0,s.jsxs)(n.p,{children:["\u4f5c\u8005\u5efa\u8bae\u5148\u770b",(0,s.jsx)(n.code,{children:"triangle -h"}),", \u4f46\u6211\u8ba4\u4e3a\u5148\u628a\u7ed3\u6784\u4f53\u770b\u61c2\u4e2a\u5927\u6982\u518d\u56de\u53bb\u770b\u5f00\u5173(switch)\u66f4\u5408\u9002..."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"If you haven't read Triangle's instructions (run \"triangle -h\" to read them), you won't understand what follows."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u7f16\u8bd1\u7ec6\u8282\uff0c\u56e0\u4e3a\u6211\u76f4\u63a5\u7528\u4e86vcpkg\u63d0\u4f9b\u7684Triangle\u5305, \u6240\u4ee5\u5c31\u4e0d\u4ed4\u7ec6\u770b\u4e86..."}),"\n",(0,s.jsx)(n.p,{children:"\u603b\u800c\u8a00\u4e4b\uff1atriangle\u8981\u7528makefile\u7f16\u8bd1\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u53ef\u4ee5\u5f71\u54cdswitch\u7684\u5b8f\u5b9a\u4e49\u5fc5\u987b\u8981makefile\u6216triangle.c\u4e2d\u4fee\u6539\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'Triangle must be compiled into an object file (triangle.o) with the  TRILIBRARY symbol defined (generally by using the -DTRILIBRARY compiler switch).  The makefile included with Triangle will do this for you if you run "make trilibrary".  The resulting object file can be called via the procedure triangulate().'}),"\n",(0,s.jsx)(n.p,{children:"If the size of the object file is important to you, you may wish to generate a reduced version of triangle.o. The REDUCED symbol gets rid of all features that are primarily of research interest. Specifically, the -DREDUCED switch eliminates Triangle's -i, -F, -s, and -C switches. The CDT_ONLY symbol gets rid of all meshing algorithms above and beyond constrained Delaunay triangulation.  Specifically, the -DCDT_ONLY switch eliminates Triangle's -r, -q, -a, -u, -D, -Y, -S, and -s switches."}),"\n",(0,s.jsx)(n.p,{children:"IMPORTANT:  These definitions (TRILIBRARY, REDUCED, CDT_ONLY) must be made in the makefile or in triangle.c itself.  Putting these definitions in this file (triangle.h) will not create the desired effect."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The calling convention for triangulate() follows."}),"\n",(0,s.jsx)(n.p,{children:"\u6838\u5fc3\u5185\u5bb9\u5c31\u662f\u4e0b\u9762\u7684\u4e94\u884c\u4ee3\u7801\u3002"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"triangulate()"}),"\u662f\u4e09\u89d2\u5256\u5206\u51fd\u6570\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"triswitches"}),"\u662f\u6211\u4eec\u8981\u8c03\u7528\u7684\u5f00\u5173\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"in"}),", ",(0,s.jsx)(n.code,{children:"out"}),"\u5206\u522b\u662f\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u9876\u70b9\u3001\u7ebf\u6bb5\u3001\u4e09\u89d2\u5f62\u3001\u90bb\u63a5\u4e09\u89d2\u5f62\u7b49\u4fe1\u606f\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vorout"})," \u662f\u8f93\u51fa\u7684voronoi\u56fe\u4fe1\u606f\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"      void triangulate(triswitches, in, out, vorout)                       \r\n      char *triswitches;                                                   \r\n      struct triangulateio *in;                                            \r\n      struct triangulateio *out;                                           \r\n      struct triangulateio *vorout;                                        \n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"triswitches"}),"\u5e38\u7528\u6307\u4ee4\u7684\u4f7f\u7528\u5efa\u8bae\uff1a"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\u4f7f\u7528",(0,s.jsx)(n.code,{children:"z"}),"\u53ef\u4ee5\u6307\u5b9a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u8fd9\u5f88\u7b26\u5408C/C++\u7684\u5f00\u53d1\u4e60\u60ef\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:["\u4f7f\u7528",(0,s.jsx)(n.code,{children:"Q"}),"\u53ef\u4ee5\u5f00\u542f\u9759\u9ed8\u6a21\u5f0f\uff0c\u4e0d\u6253\u5370\u989d\u5916\u7684\u4fe1\u606f\uff08\u9664\u975e\u62a5\u9519\uff09\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u679c\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"q"}),"(\u4e09\u89d2\u5f62\u89d2\u5ea6\u9650\u5236), ",(0,s.jsx)(n.code,{children:"a"}),"(\u4e09\u89d2\u5f62\u9762\u79ef\u9650\u5236), ",(0,s.jsx)(n.code,{children:"u"}),"(\u7ea6\u675f\u4e09\u89d2\u5f62\u5c3a\u5bf8), ",(0,s.jsx)(n.code,{children:"D"}),"(\u4e25\u5bc6\u4e09\u89d2\u5256\u5206), ",(0,s.jsx)(n.code,{children:"j"}),"(\u4e22\u5f03\u91cd\u590d\u70b9), \u548c",(0,s.jsx)(n.code,{children:"s"}),"(\u7ebf\u6bb5\u5206\u5272)\u5219\u8f93\u51fa\u7684\u9876\u70b9\u4e0e\u8f93\u5165\u7684\u9876\u70b9\u76f8\u540c\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:["\u4f7f\u7528",(0,s.jsx)(n.code,{children:"N"}),"\u53ef\u4ee5\u4e0d\u8f93\u51fa\u8282\u70b9\uff0c\u4ece\u800c\u8282\u7701\u5185\u5b58\uff08\u5982\u679c\u786e\u5b9e\u4e0d\u9700\u8981\u8f93\u51fa\u8282\u70b9\u7684\u8bdd\uff09\uff1b"]}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u679c\u786e\u5b9e\u9700\u8981\u8f93\u51fa\u8282\u70b9\u4f46\u53c8\u60f3\u8282\u7ea6\u5185\u5b58\uff0c\u53ef\u4ee5\u5728",(0,s.jsx)(n.code,{children:"triangulate"}),"\u4e4b\u524d\u4ee4",(0,s.jsx)(n.code,{children:"out->pointlist = in->pointlist"}),", \u8fd9\u6837\u7a0b\u5e8f\u5c31\u4f1a\u628a\u8f93\u51fa\u7684\u8282\u70b9\u8986\u76d6\u5230\u8f93\u5165\u8282\u70b9\u3002\uff08\uff1f\uff09"]}),"\n",(0,s.jsxs)(n.li,{children:["\u7f16\u8bd1\u65f6\uff0c\u5982\u679c\u5b9a\u4e49\u4e86\u5b8fTRILIBRARY\uff0c\u90a3\u4e48",(0,s.jsx)(n.code,{children:"I"}),"(\u65e0\u8fed\u4ee3\u7f16\u53f7)\u548c",(0,s.jsx)(n.code,{children:"g"}),"(\u8f93\u51fa.off)\u4e24\u4e2a\u6307\u4ee4\u5c31\u4f1a\u5931\u6548\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"triswitches"})," is a string containing the command line switches you wish to invoke.  No initial dash is required. Some suggestions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You'll probably find it convenient to use the 'z' switch so that points (and other items) are numbered from zero.  This simplifies indexing, because the first item of any type always starts at index [0] of the corresponding array, whether that item's number is zero or one."}),"\n",(0,s.jsx)(n.li,{children:"You'll probably want to use the 'Q' (quiet) switch in your final code, but you can take advantage of Triangle's printed output (including the 'V' switch) while debugging."}),"\n",(0,s.jsx)(n.li,{children:"If you are not using the 'q', 'a', 'u', 'D', 'j', or 's' switches, then the output points will be identical to the input points, except possibly for the boundary markers.  If you don't need the boundary markers, you should use the 'N' (no nodes output) switch to save memory.  (If you do need boundary markers, but need to save memory, a good nasty trick is to set out->pointlist equal to in->pointlist before calling triangulate(), so that Triangle overwrites the input points with identical copies.)"}),"\n",(0,s.jsx)(n.li,{children:"The 'I' (no iteration numbers) and 'g' (.off file output) switches have no effect when Triangle is compiled with TRILIBRARY defined."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"in"}),"\u4e3a\u8f93\u5165\u7684\u70b9\u3001\u7ebf\u3001\u4e09\u89d2\u5f62\u3001\u5b54\u6d1e\u3001\u90bb\u63a5\u4e09\u89d2\u5f62\u7b49\u4fe1\u606f\uff1b",(0,s.jsx)(n.code,{children:"out"}),"\u4e3a\u8f93\u5165\u7684\u70b9\u3001\u7ebf\u3001\u4e09\u89d2\u5f62\u3001\u5b54\u6d1e\u3001\u90bb\u63a5\u4e09\u89d2\u5f62\u7b49\u4fe1\u606f\uff1b",(0,s.jsx)(n.code,{children:"vorout"}),"\u4e3a\u8f93\u51fa\u7684Voronoi\u4fe1\u606f\u3002\u540e\u8005\u53ef\u80fd\u4e3a\u7a7a\uff08\u5982\u679c\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"v"}),"\u7684\u8bdd\uff09\uff0c\u4f46\u524d\u4e24\u8005\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u6267\u884ctriangulate\u524d\uff0c",(0,s.jsx)(n.code,{children:"in"}),"\u548c",(0,s.jsx)(n.code,{children:"out"}),"\u7ed3\u6784\u4f53\u7684\u90e8\u5206\u4fe1\u606f\u9700\u8981\u5148\u521d\u59cb\u5316\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'in', 'out', and 'vorout' are descriptions of the input, the output, and the Voronoi output.  If the 'v' (Voronoi output) switch is not used, 'vorout' may be NULL.  'in' and 'out' may never be NULL."}),"\n",(0,s.jsx)(n.p,{children:"Certain fields of the input and output structures must be initialized, as described below."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u7ed3\u6784\u4f53\u8bf4\u660e",children:"\u7ed3\u6784\u4f53\u8bf4\u660e"}),"\n",(0,s.jsx)(n.p,{children:"The 'triangulateio' structure."}),"\n",(0,s.jsx)(n.p,{children:"Used to pass data into and out of the triangulate() procedure."}),"\n",(0,s.jsx)(n.p,{children:"Arrays are used to store points, triangles, markers, and so forth.  In all cases, the first item in any array is stored starting at index [0]. However, that item is item number '1' unless the 'z' switch is used, in which case it is item number '0'.  Hence, you may find it easier to index points (and triangles in the neighbor list) if you use the 'z' switch.  Unless, of course, you're calling Triangle from a Fortran program."}),"\n",(0,s.jsx)(n.p,{children:"Description of fields (except the 'numberof' fields, which are obvious):"}),"\n",(0,s.jsx)(n.h4,{id:"pointlist",children:"pointlist"}),"\n",(0,s.jsxs)(n.p,{children:["\u9876\u70b9\u7684\u5750\u6807\u6570\u7ec4\uff0cREAL\u7c7b\u578b\uff08\u5927\u90e8\u5206\u4ee3\u7801\u91ccREAL\u5c31\u662fdouble\uff09\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u4e3a\u7b2c1\u4e2a\u70b9\u7684x\u5750\u6807\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u4e3a\u7b2c\u4e00\u4e2a\u70b9\u7684y\u5750\u6807\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6240\u4ee5pointlist\u603b\u957f\u5ea6\u7b49\u4e8e",(0,s.jsx)(n.code,{children:"numberofpoint * 2"}),", pointlist\u6570\u7ec4\u5360\u7528\u5185\u5b58\u957f\u5ea6\u7b49\u4e8e",(0,s.jsx)(n.code,{children:"numberofpoint * 2 * sizeof(REAL)"}),"\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'pointlist':  An array of point coordinates.  The first point's x coordinate is at index [0] and its y coordinate at index [1], followed by the coordinates of the remaining points.  Each point occupies two REALs."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"pointattributelist",children:"pointattributelist"}),"\n",(0,s.jsxs)(n.p,{children:["\u9876\u70b9\u7684\u5c5e\u6027\u6570\u7ec4, REAL\u7c7b\u578b, \u6bcf\u4e2a\u70b9\u90fd\u6709",(0,s.jsx)(n.code,{children:"numberofpointattributes"}),"\u4e2a\u5c5e\u6027\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'pointattributelist':  An array of point attributes.  Each point's attributes occupy 'numberofpointattributes' REALs."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"pointmarkerlist",children:"pointmarkerlist"}),"\n",(0,s.jsx)(n.p,{children:"\u70b9\u6807\u8bb0\u6570\u7ec4\uff08\u5565\u610f\u601d\uff1f\uff09, \u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6807\u8bb0, \u7c7b\u578b\u4e3aint\uff1f"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'pointmarkerlist':  An array of point markers; one int per point."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"trianglelist",children:"trianglelist"}),"\n",(0,s.jsxs)(n.p,{children:["\u4e09\u89d2\u5f62\u6570\u7ec4, int\u7c7b\u578b, ",(0,s.jsx)(n.code,{children:"trianglelist[i*3+0], trianglelist[i*3+1], trianglelist[i*3+2]"}),"\u8868\u793a\u7b2c",(0,s.jsx)(n.code,{children:"i"}),"\u4e2a\u4e09\u89d2\u5f62\u4e09\u4e2a\u9876\u70b9\u7684\u7d22\u5f15\u503c\uff08\u4e09\u4e2a\u89d2\u70b9\u6cbf\u9006\u65f6\u9488\u65cb\u8f6c\uff09\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u679c\u4e09\u89d2\u5f62\u8868\u793a\u975e\u7ebf\u6027\u5143\u7d20\uff0c\u5219\u540e\u9762\u662f\u4efb\u4f55\u5176\u4ed6\u8282\u70b9\uff08\uff1f\uff09\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5360\u7528\u5185\u5b58\u4e3a",(0,s.jsx)(n.code,{children:"numberofcorners * sizeof(int)"}),"\u3002(\u901a\u5e38\u662f3*4)"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'trianglelist':  An array of triangle corners.  The first triangle's first corner is at index [0], followed by its other two corners in counterclockwise order, followed by any other nodes if the triangle represents a nonlinear element.  Each triangle occupies 'numberofcorners' ints."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"triangleattributelist",children:"triangleattributelist"}),"\n",(0,s.jsxs)(n.p,{children:["\u4e09\u89d2\u5f62\u7684\u5c5e\u6027\u6570\u7ec4\u3002\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5360\u7528\u5185\u5b58\u957f\u5ea6\u4e3a",(0,s.jsx)(n.code,{children:"numberoftriangleattributes * sizeof(REAL)"}),"\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'triangleattributelist':  An array of triangle attributes. Each triangle's attributes occupy 'numberoftriangleattributes' REALs."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"trianglearealist",children:"trianglearealist"}),"\n",(0,s.jsxs)(n.p,{children:["\u4e09\u89d2\u5f62\u7684\u7ea6\u675f\u9762\u79ef\uff0c\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5bf9\u5e94\u4e00\u4e2a",(0,s.jsx)(n.code,{children:"REAL"}),", \u4ec5\u5728\u8f93\u5165\u65f6\u4f7f\u7528\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'trianglearealist':  An array of triangle area constraints; one REAL per triangle.  Input only."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"neighborlist",children:"neighborlist"}),"\n",(0,s.jsx)(n.p,{children:"\u90bb\u63a5\u4e09\u89d2\u5f62\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u4e09\u89d2\u5f62\u90fd\u6709\u4e09\u4e2a\u90bb\u63a5\u4e09\u89d2\u5f62\uff0c\u5bf9\u5e94\u4e09\u4e2aint\uff0c \u8bb0\u5f55\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u7d22\u5f15\u503c\uff08\u5982\u679c\u6ca1\u6709\u90bb\u63a5\u4e09\u89d2\u5f62\u5219\u8be5\u5904\u7d22\u5f15\u503c\u4e3a-1\uff09\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'neighborlist':  An array of triangle neighbors; three ints per triangle. Output only."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"segmentlist",children:"segmentlist"}),"\n",(0,s.jsx)(n.p,{children:"\u7ebf\u6bb5\u7684\u7aef\u70b9\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u90fd\u6709\u4e24\u4e2a\u7aef\u70b9\uff0c\u5bf9\u5e94\u4e24\u4e2aint\uff0c\u8bb0\u5f55\u4e24\u4e2a\u7aef\u70b9\u7684\u7d22\u5f15\u503c\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'segmentlist':  An array of segment endpoints.  The first segment's endpoints are at indices [0] and [1], followed by the remaining segments.  Two ints per segment."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"segmentmarkerlist",children:"segmentmarkerlist"}),"\n",(0,s.jsx)(n.p,{children:"\u7ebf\u6bb5\u6807\u8bb0\u6570\u7ec4\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u5bf9\u5e94\u4e00\u4e2aint\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'segmentmarkerlist':  An array of segment markers; one int per segment."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"holelist",children:"holelist"}),"\n",(0,s.jsxs)(n.p,{children:["\u5b54\u6d1e\u6570\u7ec4\uff0c",(0,s.jsx)(n.code,{children:"holelist[0], holelist[1]"}),"\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b54\u6d1e\u7684\u7b2c\u4e00\u4e2a\u70b9\u7684x\u548cy\u5750\u6807\uff0c\u5269\u4e0b\u7684\u6570\u7ec4\u662f\u8be5\u7a7a\u6d1e\u7684\u5176\u4ed6\u70b9\uff08\u9047\u5230\u7b2c0\u70b9\u5e94\u8be5\u5c31\u8bf4\u660e\u7b2c\u4e00\u4e2a\u5b54\u6d1e\u5df2\u7ecf\u6210\u73af\u7ed3\u675f\uff1f\uff09\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u6bcf\u4e2a\u70b9\u5360\u7528\u4e24\u4e2a",(0,s.jsx)(n.code,{children:"REAL"}),", \u4ec5\u9650\u8f93\u5165, \u5b83\u7684\u6307\u9488\u4f1a\u88ab\u590d\u5236\u5230\u8f93\u51fa\u7ed3\u6784\u4f53\u4e2d\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'holelist':  An array of holes.  The first hole's x and y coordinates are at indices [0] and [1], followed by the remaining holes.  Two REALs per hole.  Input only, although the pointer is copied to the output structure for your convenience."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"regionlist",children:"regionlist"}),"\n",(0,s.jsxs)(n.p,{children:["\u5c5e\u6027\u4e0e\u9762\u79ef\u7ea6\u675f\u7684\u6570\u7ec4\uff0c",(0,s.jsx)(n.code,{children:"regionlist[0], regionlist[1], regionlist[2], regionlist[3]"}),"\u5206\u522b\u8868\u793a\u7b2c\u4e00\u4e2a\u7ea6\u675f\u7684x\u5750\u6807\u3001y\u5750\u6807\u3001\u533a\u57df\u5c5e\u6027(regional attribute)\u3001\u4ee5\u53ca\u6700\u5927\u9762\u79ef( maximum area)\u3002\u6bcf\u4e2a\u7ea6\u675f\u5360\u7528\u56db\u4e2aREAL\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5176\u4e2d\uff0c\u533a\u57df\u5c5e\u6027\u7ea6\u675f\u4ec5\u5728\u4f7f\u7528",(0,s.jsx)(n.code,{children:"A"}),"\u65f6\u624d\u594f\u6548\u3001\u533a\u57df\u7684\u9762\u79ef\u7ea6\u675f\u4ec5\u5728\u4f7f\u7528",(0,s.jsx)(n.code,{children:"A"}),"\u5e76\u4e14",(0,s.jsx)(n.strong,{children:"\u6ca1\u6709\u8ddf\u968f\u6570\u5b57"}),"\u65f6\u624d\u594f\u6548\u3002\u4ec5\u9650\u8f93\u5165\uff0c\u5e76\u4e14\u6307\u9488\u88ab\u590d\u5236\u5230\u8f93\u51fa\u7684\u7ed3\u6784\u4f53\u4e2d\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'regionlist':  An array of regional attributes and area constraints. The first constraint's x and y coordinates are at indices [0] and [1], followed by the regional attribute at index [2], followed by the maximum area at index [3], followed by the remaining area constraints. Four REALs per area constraint.  Note that each regional attribute is used only if you select the 'A' switch, and each area constraint is used only if you select the 'a' switch (with no number following), but omitting one of these switches does not change the memory layout. Input only, although the pointer is copied to the output structure for your convenience."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"edgelist",children:"edgelist"}),"\n",(0,s.jsxs)(n.p,{children:["\u8fb9\u7f18\u7aef\u70b9\u7684\u6570\u7ec4\u3002",(0,s.jsx)(n.code,{children:"edgelist[0], edgelist[1]"}),"\u4ee3\u8868\u7b2c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u7d22\u5f15\uff0c\u540e\u9762\u662f\u5176\u4f59\u8fb9\u7684\u3002\u6bcf\u6761\u8fb9\u5360\u7528\u4e24\u4e2aint\uff0c\u4ec5\u8f93\u51fa\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'edgelist':  An array of edge endpoints.  The first edge's endpoints are at indices [0] and [1], followed by the remaining edges.  Two ints per edge.  Output only."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"edgemarkerlist",children:"edgemarkerlist"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'edgemarkerlist':  An array of edge markers; one int per edge.  Output only."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"normlist",children:"normlist"}),"\n",(0,s.jsxs)(n.p,{children:["\u6cd5\u5411\u91cf\u6570\u7ec4\uff0c\u7528\u4e8eVoronoi\u56fe\u7684\u5c04\u7ebf(infinite rays)\u3002",(0,s.jsx)(n.code,{children:"normlist[0], normlist[1]"}),"\u4ee3\u8868\u7b2c\u4e00\u4e2a\u6cd5\u5411\u91cf\u7684x\uff0cy\u5e45\u5ea6(magnitude)\uff0c\u540e\u9762\u662f\u5176\u4f59\u6cd5\u5411\u91cf\u3002\u5bf9\u4e8eVoronoi\u56fe\u4e2d\u7684\u6bcf\u4e2a\u6709\u9650\u8fb9\uff0c\u6240\u5199\u7684\u6cd5\u5411\u91cf\u662f\u96f6\u5411\u91cf\uff08\u6ca1\u592a\u641e\u61c2\uff09\u3002\u6bcf\u8fb9\u4e24\u4e2aREAL\u3002\u4ec5\u8f93\u51fa\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"'normlist':  An array of normal vectors, used for infinite rays in Voronoi diagrams.  The first normal vector's x and y magnitudes are at indices [0] and [1], followed by the remaining vectors.  For each finite edge in a Voronoi diagram, the normal vector written is the zero vector.  Two REALs per edge.  Output only."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"\u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e",children:"\u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e"}),"\n",(0,s.jsxs)(n.p,{children:["\u6240\u6709\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u7684\u8f93\u5165\u8f93\u51fa\u9879\u90fd\u5fc5\u987b\u521d\u59cb\u5316\u3002\u5bf9\u4e8e\u9700\u8981\u4f7f\u7528\u7684\u6570\u7ec4\uff0c\u9700\u8981\u4e3a\u5176\u5206\u914d\u7a7a\u95f4(",(0,s.jsx)(n.code,{children:"malloc"}),", ",(0,s.jsx)(n.code,{children:"new"}),"\u4e5f\u8bb8\u4e5f\u53ef\u4ee5), \u6216\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3a",(0,s.jsx)(n.code,{children:"NULL"}),"\uff0c\u7a0b\u5e8f\u4e3a\u7ed3\u679c\u5206\u914d\u7a7a\u95f4\uff08out\u5185\u7684\u6570\u7ec4\u8bbe\u7f6e\u4e3a",(0,s.jsx)(n.code,{children:"NULL"}),"\uff09\u3002\u5e76\u4e14\u66f4\u5efa\u8bae\u4f7f\u7528\u540e\u8005\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u53ef\u4ee5\u4e3a\u5404\u4e2a\u6570\u7ec4\u5206\u914d\u6b63\u786e\u7684\u7a7a\u95f4\u957f\u5ea6\u3002\u524d\u8005\u4e3b\u8981\u662f\u4e3aFortran\u63d0\u4f9b\u7684\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["Triangle\u4e0d\u4f1a\u91ca\u653e\uff08",(0,s.jsx)(n.code,{children:"free()"}),"\uff09\u4efb\u4f55\u8f93\u5165\u6216\u8f93\u51fa\u6570\u7ec4\uff0c\u5373\u4f7f\u662f\u7a0b\u5e8f\u81ea\u5df1\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u540c\u6837\u4e5f\u9700\u8981\u624b\u52a8\u91ca\u653e\u5185\u5b58\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u7a0b\u5e8f\u63d0\u4f9b\u4e86",(0,s.jsx)(n.code,{children:"trifree()"}),"\u51fd\u6570\u6765\u91ca\u653eTriangle\u5206\u914d\u7684\u6570\u7ec4\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c",(0,s.jsx)(n.code,{children:"trifree()"}),"\u53ea\u8c03\u7528\u6807\u51c6\u5e93\u4e2d\u7684",(0,s.jsx)(n.code,{children:"free()"}),"\uff0c\u4f46\u8c03\u7528",(0,s.jsx)(n.code,{children:"trianglate()"}),"\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u66ff\u6362triangle.c\u4e2d\u7684",(0,s.jsx)(n.code,{children:"trimalloc()"}),"\u548c",(0,s.jsx)(n.code,{children:"trifree()"}),"\u6765\u4f7f\u7528\u7279\u5b9a\u7684\u5185\u5b58\u5206\u914d\u5668(memory allocators)\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Any input fields that Triangle will examine must be initialized. Furthermore, for each output array that Triangle will write to, you must either provide space by setting the appropriate pointer to pointto the space you want the data written to, or you must initialize the pointer to NULL, which tells Triangle to allocate space for the results. The latter option is preferable, because Triangle always knows exactly how much space to allocate.  The former option is provided mainly for people who need to call Triangle from Fortran code, though it also makes possible some nasty space-saving tricks, like writing the output to the same arrays as the input."}),"\n",(0,s.jsx)(n.p,{children:"Triangle will not free() any input or output arrays, including those it allocates itself; that's up to you.  You should free arrays allocated by Triangle by calling the trifree() procedure defined below.  (By default, trifree() just calls the standard free() library procedure, but applications that call triangulate() may replace trimalloc() and trifree() in triangle.c to use specialized memory allocators.)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u7ed3\u6784\u4f53\u521d\u59cb\u5316",children:"\u7ed3\u6784\u4f53\u521d\u59cb\u5316"}),"\n",(0,s.jsx)(n.p,{children:"Here's a guide to help you decide which fields you must initialize before you call triangulate()."}),"\n",(0,s.jsx)(n.h4,{id:"in",children:"in"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"'pointlist' must always point to a list of points; 'numberofpoints' and 'numberofpointattributes' must be properly set.\r\n'pointmarkerlist' must either be set to NULL (in which case all markers default to zero), or must point to a list of markers.  If 'numberofpointattributes' is not zero, 'pointattributelist' must point to a list of point attributes."}),"\n",(0,s.jsx)(n.li,{children:"If the 'r' switch is used, 'trianglelist' must point to a list of triangles, and 'numberoftriangles', 'numberofcorners', and 'numberoftriangleattributes' must be properly set.  If 'numberoftriangleattributes' is not zero, 'triangleattributelist' must point to a list of triangle attributes.  If the 'a' switch is used (with no number following), 'trianglearealist' must point to a list of triangle area constraints.  'neighborlist' may be ignored."}),"\n",(0,s.jsx)(n.li,{children:"If the 'p' switch is used, 'segmentlist' must point to a list of segments, 'numberofsegments' must be properly set, and 'segmentmarkerlist' must either be set to NULL (in which case all markers default to zero), or must point to a list of markers."}),"\n",(0,s.jsx)(n.li,{children:"If the 'p' switch is used without the 'r' switch, then 'numberofholes' and 'numberofregions' must be properly set.  If 'numberofholes' is not zero, 'holelist' must point to a list of holes.  If 'numberofregions' is not zero, 'regionlist' must point to a list of region constraints."}),"\n",(0,s.jsx)(n.li,{children:"If the 'p' switch is used, 'holelist', 'numberofholes', 'regionlist', and 'numberofregions' is copied to 'out'.  (You can nonetheless get away with not initializing them if the 'r' switch is used.)"}),"\n",(0,s.jsx)(n.li,{children:"'edgelist', 'edgemarkerlist', 'normlist', and 'numberofedges' may be ignored."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"out",children:"out"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"'pointlist' must be initialized (NULL or pointing to memory) unless the 'N' switch is used.  'pointmarkerlist' must be initialized unless the 'N' or 'B' switch is used.  If 'N' is not used and 'in->numberofpointattributes' is not zero, 'pointattributelist' must be initialized."}),"\n",(0,s.jsx)(n.li,{children:"'trianglelist' must be initialized unless the 'E' switch is used.'neighborlist' must be initialized if the 'n' switch is used.  If the 'E' switch is not used and ('in->numberofelementattributes' is not zero or the 'A' switch is used), 'elementattributelist' must be initialized.  'trianglearealist' may be ignored."}),"\n",(0,s.jsx)(n.li,{children:"'segmentlist' must be initialized if the 'p' or 'c' switch is used, and the 'P' switch is not used.  'segmentmarkerlist' must also be initialized under these circumstances unless the 'B' switch is used."}),"\n",(0,s.jsx)(n.li,{children:"'edgelist' must be initialized if the 'e' switch is used. 'edgemarkerlist' must be initialized if the 'e' switch is used and the 'B' switch is not."}),"\n",(0,s.jsx)(n.li,{children:"'holelist', 'regionlist', 'normlist', and all scalars may be ignored."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"vorout",children:"vorout"}),"\n",(0,s.jsx)(n.p,{children:"(only needed if 'v' switch is used)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"'pointlist' must be initialized.  If 'in->numberofpointattributes' is not zero, 'pointattributelist' must be initialized. 'pointmarkerlist' may be ignored."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"'edgelist' and 'normlist' must both be initialized. 'edgemarkerlist' may be ignored."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Everything else may be ignored."}),"\n",(0,s.jsx)(n.p,{children:"After a call to triangulate(), the valid fields of 'out' and 'vorout'will depend, in an obvious way, on the choice of switches used.  Note that when the 'p' switch is used, the pointers 'holelist' and 'regionlist' are copied from 'in' to 'out', but no new space is allocated; be careful that you don't free() the same array twice.  On the other hand, Triangle will never copy the 'pointlist' pointer (or any others); new space is allocated for 'out->pointlist', or if the 'N' switch is used, 'out->pointlist' remains uninitialized."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"All of the meaningful 'numberof' fields will be properly set; for instance, 'numberofedges' will represent the number of edges in the triangulation whether or not the edges were written.  If segments are not used, 'numberofsegments' will indicate the number of boundary edges."}),"\n",(0,s.jsx)(n.h2,{id:"triangle--h",children:"triangle -h"}),"\n",(0,s.jsx)(n.p,{children:"A Two-Dimensional Quality Mesh Generator and Delaunay Triangulator.Version 1.6"}),"\n",(0,s.jsx)(n.h3,{id:"\u7248\u6743\u8bf4\u660e",children:"\u7248\u6743\u8bf4\u660e"}),"\n",(0,s.jsxs)(n.p,{children:["Copyright 1993, 1995, 1997, 1998, 2002, 2005 Jonathan Richard Shewchuk 2360 Woolsey #H / Berkeley, California 94705-1927 Bugs/comments to ",(0,s.jsx)(n.a,{href:"mailto:jrs@cs.berkeley.edu",children:"jrs@cs.berkeley.edu"})]}),"\n",(0,s.jsx)(n.p,{children:"Created as part of the Quake project (tools for earthquake simulation). Supported in part by NSF Grant CMS-9318163 and an NSERC 1967 Scholarship. There is no warranty whatsoever.  Use at your own risk. This executable is compiled for double precision arithmetic."}),"\n",(0,s.jsx)(n.h3,{id:"\u529f\u80fd\u4ecb\u7ecd",children:"\u529f\u80fd\u4ecb\u7ecd"}),"\n",(0,s.jsx)(n.p,{children:"Triangle\u53ef\u4ee5\u751f\u6210\u7cbe\u786eDelaunay\u4e09\u89d2\u5256\u5206(exact Delaunay triangulations), \u7ea6\u675fDelaunay\u4e09\u89d2\u5256\u5206(constrained Delaunay triangulations), \u4e00\u81f4Delaunay\u4e09\u89d2\u5256\u5206(conforming Delaunay triangulations), Voronoi\u56fe(Voronoi diagrams), \u4ee5\u53ca\u9ad8\u8d28\u91cf\u7684\u4e09\u89d2\u5f62\u7f51\u683c(high-quality triangular meshes)\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Triangle generates exact Delaunay triangulations, constrained Delaunay triangulations, conforming Delaunay triangulations, Voronoi diagrams, and high-quality triangular meshes."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u9ad8\u8d28\u91cf\u7684\u4e09\u89d2\u5f62\u7f51\u683c(The latter)\u4e2d\u4e0d\u5b58\u5728\u8fc7\u5927\u6216\u8fc7\u5c0f\u7684\u89d2, \u6240\u4ee5\u9002\u5408\u6709\u9650\u5143\u5206\u6790(finite element analysis)\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"The latter can be generated with no small or large angles, and are thus suitable for finite element analysis.  If no\r\ncommand line switch is specified, your .node input file is read, and the Delaunay triangulation is returned in .node and .ele output files."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"triangle\u8bed\u6cd5",type:"tip",children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"triangle [-prq__a__uAcDjevngBPNEIOXzo_YS__iFlsCQVh] input_file"})})}),"\n",(0,s.jsxs)(n.p,{children:["\u8f93\u5165\u6587\u4ef6(input_file)\u5fc5\u987b\u662f\u540e\u7f00\u4e3a",(0,s.jsx)(n.code,{children:".node"}),"\u7684\u6587\u4ef6, \u9664\u975e\u6253\u5f00",(0,s.jsx)(n.code,{children:"-p"}),"\u5f00\u5173\u65f6\u4f7f\u7528\u540e\u7f00\u4e3a",(0,s.jsx)(n.code,{children:".poly"}),"\u7684\u6587\u4ef6\u3002\u5982\u679c\u4f7f\u7528\u4e86",(0,s.jsx)(n.code,{children:"-r"}),"\u5c31\u5fc5\u987b\u8f93\u5165",(0,s.jsx)(n.code,{children:".node"}),"\u548c",(0,s.jsx)(n.code,{children:".ele"}),"\u6587\u4ef6, \u6b64\u5916\u53ef\u80fd\u8fd8\u9700\u8981\u63d0\u4f9b",(0,s.jsx)(n.code,{children:".poly"}),"\u548c",(0,s.jsx)(n.code,{children:".area"}),"\u6587\u4ef6\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4e0b\u5212\u7ebf\u8868\u793a\u5b83\u524d\u9762\u7684\u53c2\u6570/\u5f00\u5173(switch)\u4e4b\u540e\u53ef\u4ee5\u9009\u62e9\u6027\u7684\u8f93\u5165\u6570\u5b57\u3002",(0,s.jsx)(n.strong,{children:"\u800c\u4e0d\u662f\u6307\u4ee3\u7a7a\u683c"}),"\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Underscores indicate that numbers may optionally follow certain switches. Do not leave any space between a switch and its numeric parameter."}),"\n",(0,s.jsx)(n.p,{children:"input_file must be a file with extension .node, or extension .poly if the -p switch is used.  If -r is used, you must supply .node and .ele files, and possibly a .poly file and an .area file as well."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u53c2\u6570\u8bf4\u660e",children:"\u53c2\u6570\u8bf4\u660e"}),"\n",(0,s.jsx)(n.p,{children:"The formats of these files are described below."}),"\n",(0,s.jsx)(n.h4,{id:"\u6307\u4ee4\u7b80\u8ff0",children:"\u6307\u4ee4\u7b80\u8ff0"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u6307\u4ee4"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"\u8bf4\u660e"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-p"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u8f93\u5165\u9876\u70b9\u65f6, \u4f7f\u7528-p\u53ef\u4ee5\u751f\u6210."})]})})]}),"\n",(0,s.jsx)(n.p,{children:"Command Line Switches:"}),"\n",(0,s.jsx)(n.h4,{id:"-p-\u8bfb\u53d6poly\u6587\u4ef6",children:"-p \u8bfb\u53d6poly\u6587\u4ef6"}),"\n",(0,s.jsxs)(n.p,{children:["\u8bfb\u53d6\u5e73\u9762\u76f4\u7ebf\u56fe(Planar Straight Line Graph, PSLG, *.poly file), \u751f\u6210\u4e00\u4e2a",(0,s.jsx)(n.strong,{children:"\u53d7\u7ea6\u675f\u7684Delaunay\u4e09\u89d2\u5256\u5206(constrained Delaunay triangulation, CDT)"}),"\u3002\u5982\u679c\u4f7f\u7528\u4e86",(0,s.jsx)(n.code,{children:"-s"}),"\u3001 ",(0,s.jsx)(n.code,{children:"-q"}),"\u3001 ",(0,s.jsx)(n.code,{children:"-a"}),"\u3001\u6216",(0,s.jsx)(n.code,{children:"-u"}),"\uff0c\u5219\u4f1a\u751f\u6210\u4e00\u4e2a",(0,s.jsx)(n.strong,{children:"\u4e00\u81f4\u7ea6\u675fDelaunay\u4e09\u89d2\u5256\u5206(conforming constrained Delaunay triangulation, CCDT)"}),"\u3002\u5982\u679c\u60f3\u8981\u751f\u6210\u4e00\u4e2a",(0,s.jsx)(n.strong,{children:"\u771f\u6b63\u7684Delaunay\u4e09\u89d2\u5256\u5206(exact Delaunay triangulation, EDT)"}),"\uff0c\u800c\u4e0d\u662f\u53d7\u7ea6\u675f\u7684\uff0c\u5219\u9700\u8981\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-D"}),"\u3002\u5f53\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-p"}),"\u65f6, Triangle\u4f1a\u9ed8\u8ba4\u8bfb\u53d6",(0,s.jsx)(n.code,{children:".node"}),"\u6587\u4ef6\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u53ef\u4ee5\u5bf9\u9876\u70b9(vertices)\u3001\u7ebf\u6bb5(segments)\u3001\u5b54(holes)\u3001\u533a\u57df\u5c5e\u6027(regional attributes)\u548c\u533a\u57df(regional area)\u65bd\u52a0\u7ea6\u675f\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Reads a Planar Straight Line Graph (.poly file), which can specify vertices, segments, holes, regional attributes, and regional area constraints.  Generates a constrained Delaunay triangulation (CDT) fitting the input; or, if -s, -q, -a, or -u is used, a conforming constrained Delaunay triangulation (CCDT).  If you want a truly Delaunay (not just constrained Delaunay) triangulation, use -D as well.  When -p is not used, Triangle reads a .node file by default."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-r-\u4f18\u5316\u9884\u8f93\u5165\u7f51\u683c",children:"-r \u4f18\u5316\u9884\u8f93\u5165\u7f51\u683c"}),"\n",(0,s.jsxs)(n.p,{children:["\u4f18\u5316\u4ece",(0,s.jsx)(n.code,{children:".node"}),"\u548c",(0,s.jsx)(n.code,{children:".ele"}),"\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u7f51\u683c\u3002\u5982\u679c\u540c\u65f6\u4f7f\u7528\u4e86",(0,s.jsx)(n.code,{children:"-p"}),", ",(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u4e5f\u4f1a\u88ab\u8bfb\u53d6\u5e76\u7528\u4e8e\u7ea6\u675f\u7f51\u683c\u4e2d\u7684\u7ebf\u6bb5(segments)\uff1b\u5982\u679c",(0,s.jsx)(n.code,{children:"-a"}),"\u4e5f\u88ab\u4f7f\u7528\u5e76\u4e14\u6ca1\u6709\u8ddf\u968f\u6570\u5b57, \u5219",(0,s.jsx)(n.code,{children:".area"}),"\u6587\u4ef6\u4f1a\u88ab\u8bfb\u53d6\u5e76\u5bf9\u7f51\u683c\u65bd\u52a0\u9762\u79ef\u7ea6\u675f\u3002\uff08\u8be6\u89c1",(0,s.jsx)(n.code,{children:"-a"}),"?\uff09"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Refines a previously generated mesh.  The mesh is read from a .node file and an .ele file.  If -p is also used, a .poly file is read and used to constrain segments in the mesh.  If -a is also used (with no number following), an .area file is read and used to impose area constraints on the mesh.  Further details on refinement appear below."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-q-\u63d0\u5347\u7f51\u683c\u8d28\u91cf",children:"-q \u63d0\u5347\u7f51\u683c\u8d28\u91cf"}),"\n",(0,s.jsxs)(n.p,{children:["\u57fa\u4e8e",(0,s.jsx)(n.code,{children:"Paul Chew"}),"\u548c",(0,s.jsx)(n.code,{children:"Jim Ruppert"}),"\u7684\u6df7\u5408\u7b97\u6cd5, \u901a\u8fc7Delaunay\u7cbe\u5316\u751f\u6210\u9ad8\u8d28\u91cf\u7684\u7f51\u683c\u3002\u901a\u8fc7\u5728\u7f51\u683c\u4e2d\u589e\u52a0\u7aef\u70b9(vertices)\u6765\u4fdd\u8bc1\u6240\u6709\u7684\u89d2\u90fd\u572820~140\u5ea6\u4e4b\u95f4\u3002\u5728",(0,s.jsx)(n.code,{children:"-q"}),"\u4e4b\u540e\u53ef\u4ee5\u5236\u5b9a\u4e00\u4e2a\u6570\u5b57\u6765\u8868\u793a\u5141\u8bb8\u7684\u6700\u5c0f\u89d2\u5ea6",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"\u03b8"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\theta"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"\u03b8"})]})})]}),"(\u5141\u8bb8\u4f7f\u7528\u5c0f\u6570\u4f46\u4e0d\u5141\u8bb8\u6307\u6570\u5199\u6cd5(exponential notation)), \u5e76\u4e14\u6700\u5927\u89d2\u5ea6",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"\u03d5"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\phi"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"\u03d5"})]})})]}),"\u4e0e\u6700\u5c0f\u89d2\u5ea6",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"\u03b8"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\theta"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"\u03b8"})]})})]}),"\u7684\u5173\u7cfb\u6ee1\u8db3\uff0c",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"\u03d5"}),(0,s.jsx)(n.mo,{children:"="}),(0,s.jsx)(n.mn,{children:"18"}),(0,s.jsxs)(n.msup,{children:[(0,s.jsx)(n.mn,{children:"0"}),(0,s.jsx)(n.mo,{lspace:"0em",rspace:"0em",children:"\u2218"})]}),(0,s.jsx)(n.mo,{children:"\u2212"}),(0,s.jsx)(n.mn,{children:"2"}),(0,s.jsx)(n.mi,{children:"\u03b8"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\phi = 180^{\\circ} - 2 \\theta"})]})})}),(0,s.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"\u03d5"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.jsx)(n.span,{className:"mrel",children:"="}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.7574em",verticalAlign:"-0.0833em"}}),(0,s.jsx)(n.span,{className:"mord",children:"18"}),(0,s.jsxs)(n.span,{className:"mord",children:[(0,s.jsx)(n.span,{className:"mord",children:"0"}),(0,s.jsx)(n.span,{className:"msupsub",children:(0,s.jsx)(n.span,{className:"vlist-t",children:(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsx)(n.span,{className:"vlist",style:{height:"0.6741em"},children:(0,s.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(n.span,{className:"mord mtight",children:(0,s.jsx)(n.span,{className:"mord mtight",children:"\u2218"})})})]})})})})})]}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.jsx)(n.span,{className:"mbin",children:"\u2212"}),(0,s.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.6944em"}}),(0,s.jsx)(n.span,{className:"mord",children:"2"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"\u03b8"})]})]})]}),"\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Quality mesh generation by Delaunay refinement (a hybrid of Paul Chew's and Jim Ruppert's algorithms).  Adds vertices to the mesh to ensure that all angles are between 20 and 140 degrees.  An alternative bound on the minimum angle, replacing 20 degrees, may be specified after the 'q'.  The specified angle may include a decimal point, but not exponential notation.  Note that a bound of theta degrees on the smallest angle also implies a bound of (180 - 2 theta) on the largest angle.  If the minimum angle is 28.6 degrees or smaller, Triangle is mathematically guaranteed to terminate (assuming infinite precision arithmetic--Triangle may fail to terminate if you run out of precision).  In practice, Triangle often succeeds for minimum angles up to 34 degrees.  For some meshes, however, you might need to reduce the minimum angle to avoid problems associated with insufficient floating-point precision."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-a-\u9650\u5236\u6700\u5927\u9762\u79ef",children:"-a \u9650\u5236\u6700\u5927\u9762\u79ef"}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c",(0,s.jsx)(n.code,{children:"-a"}),"\u540e\u9762\u5e26\u6709\u6570\u5b57, \u5219\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u4e0d\u4f1a\u8d85\u8fc7\u5b83; \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6570\u5b57, \u5219.rearea\u6587\u4ef6\uff08\u5982\u679c\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-r"}),"\uff09\u6216.ply\u6587\u4ef6\uff08\u5982\u679c\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-r"}),"\uff09\u5c06\u6307\u5b9a\u4e00\u7ec4\u6700\u5927\u9762\u79ef\u7ea6\u675f\u3002",(0,s.jsx)(n.code,{children:".area"}),'\u6587\u4ef6\u5305\u542b\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5355\u72ec\u7684\u9762\u79ef\u7ea6\u675f\uff0c\u5bf9"\u57fa\u4e8e\u540e\u9a8c\u8bef\u5dee\u4f30\u8ba1(posteriori error estimates)\u7684\u6709\u9650\u5143\u7f51\u683c(finite element mesh)\u7cbe\u5ea6\u63d0\u5347"\u6709\u5e2e\u52a9\u3002',(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u53ef\u4ee5\u7ea6\u675f\u6240\u6709\u7ebf\u6bb5\u76f8\u5173\u533a\u57df(segment-bounded region)\u7684\u9762\u79ef\uff0c\u6240\u4ee5\u5728\u4e09\u89d2\u5256\u5206\u65f6\u4f7f\u7528\u5e73\u9762\u76f4\u7ebf\u56fe\u53ef\u4ee5\u63a7\u5236\u751f\u6210\u4e09\u89d2\u5f62\u5bc6\u5ea6\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4e24\u6b21\u8c03\u7528",(0,s.jsx)(n.code,{children:"-a"}),"\u5f00\u5173\u6765\u65bd\u52a0\u56fa\u5b9a\u9762\u79ef\u7ea6\u675f\u548c\u53ef\u53d8\u9762\u79ef\u7ea6\u675f\uff0c\u4e00\u6b21\u540e\u9762\u6709\u6570\u5b57\uff0c\u4e00\u6b21\u4e0d\u5e26\u6570\u5b57\u3002(\u6ca1\u770b\u61c2)"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Imposes a maximum triangle area.  If a number follows the 'a', no triangle is generated whose area is larger than that number.  If no number is specified, an .area file (if -r is used) or .poly file (if -r is not used) specifies a set of maximum area constraints. An .area file contains a separate area constraint for each triangle, and is useful for refining a finite element mesh based on a posteriori error estimates.  A .poly file can optionally contain an area constraint for each segment-bounded region, thereby controlling triangle densities in a first triangulation of a PSLG. You can impose both a fixed area constraint and a varying area constraint by invoking the -a switch twice, once with and once without a number following. Each area specified may include a decimal point."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-u-\u7ea6\u675f\u4e09\u89d2\u5f62\u5c3a\u5bf8",children:"-u \u7ea6\u675f\u4e09\u89d2\u5f62\u5c3a\u5bf8"}),"\n",(0,s.jsxs)(n.p,{children:["\u5bf9\u4e09\u89d2\u5f62\u5c3a\u5bf8\u65bd\u52a0\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49(user-defined)\u7684\u7ea6\u675f\u3002\u6709\u4e24\u79cd\u4f7f\u7528\u65b9\u6cd5\uff1a\u4e00\u662f\u4fee\u6539(edit)",(0,s.jsx)(n.code,{children:"triangle.c"}),"\u4ee3\u7801\u6587\u4ef6\u4e2d",(0,s.jsx)(n.code,{children:"triunsuitable()"}),"\u51fd\u6570\uff0c\u6765\u6dfb\u52a0\u60f3\u8981\u7684\u7ea6\u675f\uff08\u9700\u8981\u91cd\u65b0\u7f16\u8bd1Triangle\uff09\u3002\u4e8c\u662f\u4f7f\u7528\u7b26\u53f7\u96c6(symbol set)",(0,s.jsx)(n.code,{children:"EXTERNAL_TEST"}),"\u7f16\u8bd1",(0,s.jsx)(n.code,{children:"triangle.c"}),"\uff08\u7f16\u8bd1\u6307\u4ee4",(0,s.jsx)(n.code,{children:"compiler switch -DEXTERNAL_TEST"}),"\uff09\uff0c\u7136\u540e\u5c06triangle\u4e0e\u5b9e\u73b0triunsuitable()\u7684\u5355\u72ec\u5bf9\u8c61\u6587\u4ef6\u94fe\u63a5\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\uff08\u8bf4\u5b9e\u8bdd\uff0c\u4e24\u79cd\u65b9\u6cd5\u90fd\u6ca1\u592a\u641e\u660e\u767d\u662f\u5565\u610f\u601d\uff0c\u5e94\u8be5\u600e\u4e48\u5b9e\u73b0\uff09"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Imposes a user-defined constraint on triangle size.  There are two ways to use this feature.  One is to edit the triunsuitable() procedure in triangle.c to encode any constraint you like, then recompile Triangle.  The other is to compile triangle.c with the EXTERNAL_TEST symbol set (compiler switch -DEXTERNAL_TEST), then link Triangle with a separate object file that implements triunsuitable(). In either case, the -u switch causes the user-defined test to be applied to every triangle."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-a-\u6d6e\u70b9\u5c5e\u6027",children:"-A \u6d6e\u70b9\u5c5e\u6027"}),"\n",(0,s.jsxs)(n.p,{children:["\u4e3a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u9644\u52a0\u4e00\u4e2a\u6d6e\u70b9\u5c5e\u6027\uff0c\u4ee5\u6807\u8bc6\u6bcf\u4e2a\u4e09\u89d2\u5f62\u6240\u5c5e\u7684\u5206\u6bb5\u8fb9\u754c\u533a\u57df(segment-bounded region)\u3002\u5c5e\u6027\u7531",(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u63d0\u4f9b, \u5982\u679c\u4e00\u4e2a\u533a\u57df(region)\u5728.poly\u6587\u4ef6\u5b8f\u6ca1\u6709\u88ab\u6807\u8bb0\uff08\u662f\u5426\u6709\u5c5e\u6027\uff09\u65f6\uff0c\u8be5\u533a\u57df\u7684\u6240\u6709\u4e09\u89d2\u5f62\u7684\u5c5e\u6027\u6570\u503c\u4e3a0\u3002",(0,s.jsx)(n.code,{children:"-A"}),"\u53ea\u6709\u5728\u4f7f\u7528\u4e86",(0,s.jsx)(n.code,{children:"-p"}),"\u4e14\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-r"}),"\u65f6\u624d\u4f1a\u6709\u6548\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Assigns an additional floating-point attribute to each triangle that identifies what segment-bounded region each triangle belongs to. Attributes are assigned to regions by the .poly file.  If a region is not explicitly marked by the .poly file, triangles in that region are assigned an attribute of zero.  The -A switch has an effect only when the -p switch is used and the -r switch is not."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-c-\u51f8\u5305\u7ebf\u6bb5",children:"-c \u51f8\u5305\u7ebf\u6bb5"}),"\n",(0,s.jsx)(n.p,{children:"\u5728\u4e09\u89d2\u5256\u5206\u7684\u51f8\u5305(convex hull)\u4e0a\u521b\u5efa\u7ebf\u6bb5\u3002\u610f\u601d\u5e94\u8be5\u662f\u53ef\u4ee5\u8fde\u63a5\u8fb9\u754c\u70b9\u5f62\u6210\u7ebf\u6bb5\uff0c\u4f5c\u4e3a\u4e09\u89d2\u5f62\u7684\u4e00\u6761\u8fb9\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u5bf9\u9876\u70b9\u96c6(vertex set)\u8fdb\u884c\u4e09\u89d2\u5256\u5206\uff0c\u90a3\u4e48-c\u4f1a\u4f7f\u7a0b\u5e8f\u8f93\u51fa\u4e00\u4e2a",(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u3002\u5982\u679c\u5bf9\u5e73\u9762\u76f4\u7ebf\u56fe(PSLG)\u8fdb\u884c\u4e09\u89d2\u5256\u5206(\u4e5f\u5c31\u662f\u8bf4\u8f93\u5165\u4e86\u4e00\u4e2a.poly\u6587\u4ef6), ",(0,s.jsx)(n.code,{children:"-c"}),"\u4f1a\u5bf9PSLG\u7684\u6574\u4e2a\u51f8\u5305\u8fdb\u884c\u4e09\u89d2\u5256\u5206\uff0c\u65e0\u8bbaPSLG\u6709\u54ea\u4e9b\u6bb5\u3002\u5982\u679c\u5728\u5bf9PSLG\u8fdb\u884c\u4e09\u89d2\u5256\u5206\u65f6\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-c"}),"\uff0c\u7a0b\u5e8f\u4f1a\u5047\u8bbe\u5df2\u7ecf\u901a\u8fc7\u7528\u8f93\u5165PSLG\u7684\u7247\u6bb5\u5305\u56f4\u5b83\u6765\u8bc6\u522b\u8981\u4e09\u89d2\u5256\u5206\u7684\u533a\u57df\u3002\uff08\u6700\u540e\u4e00\u53e5\u8bdd\u6ca1\u770b\u61c2...\uff09"]}),"\n",(0,s.jsxs)(n.p,{children:["\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c",(0,s.jsx)(n.code,{children:"-c"}),"\u53ef\u80fd\u4f1a\u5bfc\u81f4PSLG\u6bb5\u548c\u51f8\u5305\u6bb5\u4e4b\u95f4\u51fa\u73b0",(0,s.jsx)(n.strong,{children:"\u6781\u8584\u7684\u89d2\u5ea6"}),"\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8d85\u9650\uff08\u5982\u679c\u4e09\u89d2\u7cbe\u5ea6\u4e0d\u8db3\uff0c\u53ef\u80fd\u4f1a\u5931\u8d25\uff09\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5f53\u4f60\u6b63\u5728\u7ec6\u5316(refining)\u7f51\u683c\u65f6, ",(0,s.jsx)(n.code,{children:"-c"}),"\u53ef\u4ee5\u4f1a\u4f7f\u7a0b\u5e8f\u8f93\u51fa\u4e00\u4e2a.poly\u6587\u4ef6, \u6587\u4ef6\u5185\u5305\u542b\u4e86\u7f51\u683c\u8fb9\u754c\u8fb9(boundary edges of the mesh)\u3002\uff08\u5982\u679c\u6ca1\u6709\u8f93\u5165.poly\u6587\u4ef6\u7684\u8bdd, \u5b83\u975e\u5e38\u5b9e\u7528\uff09"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Creates segments on the convex hull of the triangulation.  If you are triangulating a vertex set, this switch causes a .poly file to be written, containing all edges of the convex hull.  If you are triangulating a PSLG, this switch specifies that the whole convex hull of the PSLG should be triangulated, regardless of what segments the PSLG has.  If you do not use this switch when triangulating a PSLG, Triangle assumes that you have identified the region to be triangulated by surrounding it with segments of the input PSLG.  Beware:  if you are not careful, this switch can cause the introduction of an extremely thin angle between a PSLG segment and a convex hull segment, which can cause overrefinement (and possibly failure if Triangle runs out of precision).  If you are refining a mesh, the -c switch works differently:  it causes a .poly file to be written containing the boundary edges of the mesh (useful if no .poly file was read)."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-d-\u4e25\u5bc6\u4e09\u89d2\u5256\u5206",children:"-D \u4e25\u5bc6\u4e09\u89d2\u5256\u5206"}),"\n",(0,s.jsxs)(n.p,{children:["\u4e25\u5bc6Delaunay\u4e09\u89d2\u5256\u5206\u3002\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-D"}),"\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u4e09\u89d2\u5f62\u90fd\u7b26\u5408Delaunay\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u53d7\u7ea6\u675f\u7684Delaunay(constrained Delaunay)\uff1b\u53c8\u6216\u662f\u4fdd\u8bc1\u6240\u6709\u7684Voronoi\u9876\u70b9(Voronoi vertices)\u90fd\u5728\u4e09\u89d2\u578b\u5185\u90e8\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u8be5\u7b97\u6cd5\u6765\u81ea\u4e8e",(0,s.jsx)(n.code,{children:"Ruppert's original algorithm"}),", \u8be5\u7b97\u6cd5\u4f1a\u5206\u5272\uff08\u91cd\u6784\uff1f\uff09\u90a3\u4e9b\u76f4\u5f84\u5706(diametral circle)\u88ab\u4fb5\u5360(encroached)\u7684\u5b50\u7ebf\u6bb5(subsegment)\uff0c\u8fd9\u4f1a\u589e\u52a0\u9876\u70b9\u548c\u4e09\u89d2\u5f62\u7684\u6570\u91cf\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Conforming Delaunay triangulation:  use this switch if you want to ensure that all the triangles in the mesh are Delaunay, and not merely constrained Delaunay; or if you want to ensure that all the Voronoi vertices lie within the triangulation.  (Some finite volume methods have this requirement.)  This switch invokes Ruppert's original algorithm, which splits every subsegment whose diametral circle is encroached.  It usually increases the number of vertices and triangles."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-j-\u4e22\u5f03\u70b9",children:"-j \u4e22\u5f03\u70b9"}),"\n",(0,s.jsx)(n.p,{children:"\u5c06output.node\u6587\u4ef6\u4e2d\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e09\u89d2\u5256\u5206\u7684\u9876\u70b9\u4e22\u5f03\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cTriangle\u4f1a\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u5c06\u8f93\u5165\u7684\u9876\u70b9\u6587\u4ef6(input .node file)\u590d\u5236\u5230\u8f93\u51fa\u7684\u9876\u70b9\u6587\u4ef6(output .node file)\u4e2d\uff0c\u4e0d\u6539\u53d8\u8f93\u51fa\u7684\u9876\u70b9\u6587\u4ef6\u4e2d\u70b9\u7684\u7d22\u5f15\u987a\u5e8f\u3002",(0,s.jsx)(n.code,{children:"-j"}),"\u53ef\u9632\u6b62\u91cd\u590d\u7684\u8f93\u5165\u9876\u70b9\u6216\u88ab\u5b54\u201c\u5403\u6389\u201d\u7684\u9876\u70b9\u51fa\u73b0\u5728output.node\u6587\u4ef6\u4e2d\u3002\u5982\u679c\u8f93\u5165\u9876\u70b9\u6587\u4ef6\u4e2d\u5b58\u5728\u4e24\u4e2a\u6216\u66f4\u591a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5750\u6807\uff0c\u5219\u53ea\u6709\u7b2c\u4e00\u4e2a\u9876\u70b9\u51fa\u73b0\u5728\u8f93\u51fa\u4e2d\u3002\u5982\u679c\u4e22\u5f03\u4e86\u4efb\u4f55\u9876\u70b9\uff0c\u5219\u8f93\u51fa.node\u6587\u4ef6\u4e2d\u7684\u9876\u70b9\u7f16\u53f7\u4e0e\u8f93\u5165.node\u6587\u4ef6\u7684\u9876\u70b9\u7f16\u53f7\u4e0d\u540c\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Jettisons vertices that are not part of the final triangulation from the output .node file.  By default, Triangle copies all vertices in the input .node file to the output .node file, in the same order, so their indices do not change.  The -j switch prevents duplicated input vertices, or vertices 'eaten' by holes, from appearing in the output .node file.  Thus, if two input vertices have exactly the same coordinates, only the first appears in the output.  If any vertices are jettisoned, the vertex numbering in the output .node file differs from that of the input .node file."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-e-\u8f93\u51faedge",children:"-e \u8f93\u51fa.edge"}),"\n",(0,s.jsx)(n.p,{children:"\u8f93\u51fatriangle\u7684\u6240\u6709\u8fb9\u4fe1\u606f\u3002\uff08\u8bb0\u5f55\u6bcf\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u7684\u7d22\u5f15\u503c\uff09"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Outputs (to an .edge file) a list of edges of the triangulation."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-v-\u8f93\u51favoronoi\u56fe",children:"-v \u8f93\u51faVoronoi\u56fe"}),"\n",(0,s.jsx)(n.p,{children:"\u8f93\u51fa\u4e0e\u4e09\u89d2\u5256\u5206\u7ed3\u679c\u5bf9\u5e94\u7684Voronoi\u56fe\u3002\u56e0\u4e3a\u4e0d\u5c1d\u8bd5\u68c0\u6d4b\u9000\u5316(detect degeneracies), \u6240\u4ee5\u4e00\u90e8\u5206Voronoi\u9876\u70b9\u4f1a\u91cd\u590d\u3002 \u8bf7\u53c2\u9605\u4e0b\u9762\u5bf9Voronoi\u56fe\u7684\u8ba8\u8bba\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Outputs the Voronoi diagram associated with the triangulation. Does not attempt to detect degeneracies, so some Voronoi vertices may be duplicated.  See the discussion of Voronoi diagrams below."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-n-\u8f93\u51faneigh",children:"-n \u8f93\u51fa.neigh"}),"\n",(0,s.jsx)(n.p,{children:"\u8f93\u51fa\u6240\u6709\u4e09\u89d2\u5f62\u7684\u76f8\u90bb\u4e09\u89d2\u5f62\u4fe1\u606f\u3002\uff08\u8bb0\u5f55\u76f8\u90bb\u4e09\u89d2\u5f62\u7684\u7d22\u5f15\u503c\uff09"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Outputs (to a .neigh file) a list of triangles neighboring each triangle."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-g-\u8f93\u51faoff",children:"-g \u8f93\u51fa.off"}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5\u5bf9\u8c61\u6587\u4ef6\u7c7b\u578b(Object File Format, .off)\u8f93\u51fa\u7f51\u683c\uff0c\u4fbf\u4e8e\u4f7f\u7528Geomview package\u67e5\u770b\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Outputs the mesh to an Object File Format (.off) file, suitable for viewing with the Geometry Center's Geomview package."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-b-\u4e0d\u8f93\u51fa\u8fb9\u754c\u6807\u8bb0",children:"-B \u4e0d\u8f93\u51fa\u8fb9\u754c\u6807\u8bb0"}),"\n",(0,s.jsxs)(n.p,{children:["\u8f93\u51fa\u7684",(0,s.jsx)(n.code,{children:".node"}),"\u3001",(0,s.jsx)(n.code,{children:".poly"}),"\u548c.",(0,s.jsx)(n.code,{children:"edge"}),"\u6587\u4ef6\u4e2d\u6ca1\u6709\u8fb9\u754c\u6807\u8bb0\u3002\u8bf7\u53c2\u9605\u4e0b\u9762\u5bf9\u8fb9\u754c\u6807\u8bb0\u7684\u8be6\u7ec6\u8ba8\u8bba\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No boundary markers in the output .node, .poly, and .edge output files.  See the detailed discussion of boundary markers below."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-p-\u4e0d\u8f93\u51fapoly",children:"-P \u4e0d\u8f93\u51fa.poly"}),"\n",(0,s.jsx)(n.p,{children:"\u4e0d\u8f93\u51fa.poly\u6587\u4ef6\u3002\u8282\u7701\u78c1\u76d8\u7a7a\u95f4\uff0c\u4f46\u5728\u4ee5\u540e\u5bf9\u7f51\u683c\u8fdb\u884c\u7ec6\u5316\u65f6\uff0c\u60a8\u5c06\u5931\u53bb\u4fdd\u6301\u7ea6\u675f\u6bb5\u7684\u80fd\u529b\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No output .poly file.  Saves disk space, but you lose the ability to maintain constraining segments on later refinements of the mesh."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-n-\u4e0d\u8f93\u51fanode",children:"-N \u4e0d\u8f93\u51fa.node"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No output .node file."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-e-\u4e0d\u8f93\u51faele",children:"-E \u4e0d\u8f93\u51fa.ele"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No output .ele file."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-i-\u65e0\u8fed\u4ee3\u6570",children:"-I \u65e0\u8fed\u4ee3\u6570"}),"\n",(0,s.jsxs)(n.p,{children:["\u6291\u5236",(0,s.jsx)(n.code,{children:".node"}),"\u548c",(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u7684\u8f93\u51fa\uff0c\u4ee5\u4fdd\u8bc1\u8f93\u5165\u6587\u4ef6\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002\u4f46\u5982\u679c\u4ec5\u8f93\u5165\u4e86",(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\uff0c\u90a3\u4e48",(0,s.jsx)(n.code,{children:".node"}),"\u8fd8\u662f\u4f1a\u8f93\u51fa\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u4e0d\u80fd\u4e0e",(0,s.jsx)(n.code,{children:"-r"}),"\u4e00\u540c\u4f7f\u7528\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u4f7f\u8f93\u5165\u7684",(0,s.jsx)(n.code,{children:".ele"}),"\u6587\u4ef6\u88ab\u8986\u76d6\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5982\u679c\u8f93\u5165\u4e86",(0,s.jsx)(n.code,{children:".node"}),"\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u4e0d\u5e94\u8be5\u642d\u914d",(0,s.jsx)(n.code,{children:"-a"}),", ",(0,s.jsx)(n.code,{children:"-u"}),", \u6216",(0,s.jsx)(n.code,{children:"-s"}),"\u4f7f\u7528, \u56e0\u4e3a\u6ca1\u6709\u8f93\u51fa\u65b0\u7684",(0,s.jsx)(n.code,{children:".node"}),"\u6587\u4ef6\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u65b0\u6dfb\u52a0\u7684Steiner points\u4e0d\u4f1a\u88ab\u8bb0\u5f55\u548c\u8f93\u51fa\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No iteration numbers.  Suppresses the output of .node and .poly files, so your input files won't be overwritten.  (If your input is a .poly file only, a .node file is written.)  Cannot be used with the -r switch, because that would overwrite your input .ele file. Shouldn't be used with the -q, -a, -u, or -s switch if you are using a .node file for input, because no .node file is written, so there is no record of any added Steiner points."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-o-\u65e0\u5b54\u6d1e",children:"-O \u65e0\u5b54\u6d1e"}),"\n",(0,s.jsxs)(n.p,{children:["\u5ffd\u7565",(0,s.jsx)(n.code,{children:".poly"}),"\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5b54\u6d1e\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No holes.  Ignores the holes in the .poly file."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-x-\u964d\u4f4e\u7cbe\u5ea6",children:"-X \u964d\u4f4e\u7cbe\u5ea6"}),"\n",(0,s.jsxs)(n.p,{children:["\u5f53Triangle\u4f1a\u4f7f\u7528\u6d6e\u70b9\u503c\u8ba1\u7b97\u4ee5\u4fdd\u8bc1\u6d4b\u8bd5\u7cbe\u5ea6\u3002\u7cbe\u786e\u7684\u7b97\u6cd5\u4e5f\u4fdd\u8bc1\u4e86\u4e09\u89d2\u5256\u5206\u7b97\u6cd5\u7684\u9c81\u68d2\u6027(robustness)\u3002\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-X"}),"\u53ef\u4ee5\u7981\u7528\u7cbe\u786e\u7b97\u6cd5, \u8fd9\u4f1a\u4f7f\u5904\u7406\u901f\u5ea6\u7565\u5fae\u63d0\u5347, \u4f46\u4e5f\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u751f\u6210\u6709\u6548\u7684\u7f51\u7edc\u3002\u6240\u4ee5\u4e0d\u63a8\u8350\u4f7f\u7528\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No exact arithmetic.  Normally, Triangle uses exact floating-point arithmetic for certain tests if it thinks the inexact tests are not accurate enough.  Exact arithmetic ensures the robustness of the triangulation algorithms, despite floating-point roundoff error. Disabling exact arithmetic with the -X switch causes a small improvement in speed and creates the possibility that Triangle will fail to produce a valid mesh.  Not recommended."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-z-\u4ece0\u7f16\u53f7",children:"-z \u4ece0\u7f16\u53f7"}),"\n",(0,s.jsxs)(n.p,{children:["\u4ece0\u5f00\u59cb\u7f16\u53f7, \u5982\u679c\u4e0d\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-z"}),"\u5c31\u662f\u4ece1\u5f00\u59cb\u7f16\u53f7\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Numbers all items starting from zero (rather than one).  Note that this switch is normally overridden by the value used to number the first vertex of the input .node or .poly file.  However, this switch is useful when calling Triangle from another program."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-o2",children:"-o2"}),"\n",(0,s.jsx)(n.p,{children:"\u751f\u6210\u4e8c\u9636\u5b50\u53c2\u6570\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u6709\u516d\u4e2a\u8282\u70b9\u3002\uff08\u4e0d\u7406\u89e3\u3002\uff09"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Generates second-order subparametric elements with six nodes each."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-y-\u8fb9\u754c\u4e0d\u751f\u6210\u65b0\u9876\u70b9",children:"-Y \u8fb9\u754c\u4e0d\u751f\u6210\u65b0\u9876\u70b9"}),"\n",(0,s.jsx)(n.p,{children:"\u8fb9\u754c\u4e0d\u751f\u6210\u65b0\u7684\u9876\u70b9\u3002\u5f53\u6211\u4eec\u5fc5\u987b\u4fdd\u7559\u7f51\u683c\u8fb9\u754c\u4ee5\u7b26\u5408\u67d0\u4e9b\u76f8\u90bb\u7f51\u683c\u65f6\uff0c-Y\u975e\u5e38\u6709\u7528\u3002\u4f46\u662f\u8fd9\u5f88\u53ef\u80fd\u4f1a\u964d\u4f4e\u7f51\u683c\u7684\u8d28\u91cf\uff0c\u751f\u6210\u7684\u4e09\u89d2\u7f51\u4e2d\u53ef\u80fd\u5305\u542b\u5f62\u72b6\u975e\u5e38\u5dee\u7684\u4e09\u89d2\u5f62\uff0c\u4f46\u5982\u679c\u8fb9\u754c\u5b9a\u70b9\u95f4\u9694\u5f88\u8fd1\u90a3\u4e48\u53ef\u80fd\u4e0d\u4f1a\u6709\u5f88\u5927\u5f71\u54cd\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-YY"}),"\u53ef\u4ee5\u9632\u6b62\u6240\u6709\u5206\u6bb5\u62c6\u5206\uff0c\u5305\u62ec\u5185\u90e8\u8fb9\u754c\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"No new vertices on the boundary.  This switch is useful when the mesh boundary must be preserved so that it conforms to some adjacent mesh.  Be forewarned that you will probably sacrifice much of the quality of the mesh; Triangle will try, but the resulting mesh may contain poorly shaped triangles.  Works well if all the boundary vertices are closely spaced.  Specify this switch twice ('-YY') to prevent all segment splitting, including internal boundaries."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-s-steiner\u70b9\u6570\u91cf",children:"-S Steiner\u70b9\u6570\u91cf"}),"\n",(0,s.jsx)(n.p,{children:"\u6307\u5b9aSteiner\u70b9\u7684\u6700\u5927\u6570\u91cf\u3002"}),"\n",(0,s.jsx)(n.p,{children:"Steiner\u70b9\u6307\uff1a\u975e\u8f93\u5165\u7684\uff0c\u4f46\u662f\u6ee1\u8db3\u4e86\u6700\u5c0f\u89d2\u5ea6\u548c\u6700\u5927\u9762\u79ef\u7ea6\u675f\u540e\u88ab\u6dfb\u52a0\u8fdb\u6765\u7684\u9876\u70b9(vertices)"}),"\n",(0,s.jsxs)(n.p,{children:["\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u4e0d\u4f1a\u9650\u5236Steiner\u70b9\u6570\u91cf\u7684\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u4e86",(0,s.jsx)(n.code,{children:"-S"}),"\u5e76\u4e14\u540e\u9762\u6ca1\u6709\u8ddf\u6570\u5b57\uff0c\u90a3\u4e48Steiner\u70b9\u6570\u91cf\u5c31\u4f1a\u88ab\u9650\u5236\u4e3a0\u3002Triangle\u7a0b\u5e8f\u603b\u662f\u4f1a\u5728\u7ebf\u6bb5\u76f8\u4ea4\u5904\u6dfb\u52a0\u9876\u70b9\uff0c\u5373\u4f7f\u8d85\u8fc7\u4e86\u6570\u91cf\u9650\u5236\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5f53Triangle\u901a\u8fc7",(0,s.jsx)(n.a,{href:"#-s",children:"-s\u6307\u4ee4"}),"\u63d2\u5165\u7ebf\u6bb5\u65f6\uff0c\u5b83\u603b\u662f\u6dfb\u52a0\u8db3\u591f\u7684\u9876\u70b9\u4ee5\u786e\u4fddPLSG\uff08\u5e73\u9762\u76f4\u7ebf\u56fe\uff09\u7684\u6240\u6709\u5206\u6bb5\u90fd\u88ab\u6062\u590d\uff0c\u5fc5\u8981\u65f6\u5ffd\u7565\u9650\u5236\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Specifies the maximum number of Steiner points (vertices that are not in the input, but are added to meet the constraints on minimum angle and maximum area).  The default is to allow an unlimited number.  If you specify this switch with no number after it, the limit is set to zero.  Triangle always adds vertices at segment intersections, even if it needs to use more vertices than the limit you set.  When Triangle inserts segments by splitting (-s), it always adds enough vertices to ensure that all the segments of the PLSG are recovered, ignoring the limit if necessary."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-i-\u589e\u91cf\u7b97\u6cd5",children:"-i \u589e\u91cf\u7b97\u6cd5"}),"\n",(0,s.jsx)(n.p,{children:"\u4f7f\u7528\u589e\u91cf\u7b97\u6cd5(incremental)\u800c\u4e0d\u662f\u5206\u800c\u6cbb\u4e4b\u7b97\u6cd5(divide-and-conquer algorithm)\u6765\u6784\u5efaDelaunay\u4e09\u89d2\u5256\u5206\u3002\u5982\u679c\u5206\u800c\u6cbb\u4e4b\u7b97\u6cd5\u5931\u8d25\uff0c\u8bf7\u5c1d\u8bd5\u4e00\u4e0b\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Uses an incremental rather than a divide-and-conquer algorithm to construct a Delaunay triangulation.  Try it if the divide-and- conquer algorithm fails."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-f-sweepline\u7b97\u6cd5",children:"-F sweepline\u7b97\u6cd5"}),"\n",(0,s.jsx)(n.p,{children:"\u4f7f\u7528Steven Fortune\u7684sweepline\u7b97\u6cd5\u6784\u5efaDelaunay\u4e09\u89d2\u5256\u5206\u3002\u8b66\u544a\uff1a\u5e76\u975e\u6240\u6709\u8ba1\u7b97\u90fd\u4f7f\u7528\u7cbe\u786e\u7b97\u672f\u3002\u65e0\u6cd5\u4fdd\u8bc1\u51c6\u786e\u7684\u7ed3\u679c\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Uses Steven Fortune's sweepline algorithm to construct a Delaunay triangulation.  Warning:  does not use exact arithmetic for all calculations.  An exact result is not guaranteed."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-l-\u5782\u76f4\u5207\u5272",children:"-l \u5782\u76f4\u5207\u5272"}),"\n",(0,s.jsx)(n.p,{children:"\u5728\u5206\u800c\u6cbb\u4e4b\u7b97\u6cd5(divide-and-conquer)\u4e2d\u4ec5\u4f7f\u7528\u5782\u76f4\u5207\u5272(vertical cuts)\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e09\u89d2\u5f62\u5728\u5782\u76f4\u548c\u6c34\u5e73\u526a\u5207\u4e4b\u95f4\u4ea4\u66ff\uff0c\u8fd9\u901a\u5e38\u4f1a\u63d0\u9ad8\u901f\u5ea6\uff0c\u9664\u975e\u9876\u70b9\u96c6\u8f83\u5c0f\u6216\u8f83\u77ed\u4e14\u8f83\u5bbd\u3002\u8fd9\u79cd\u8f6c\u53d8\u4e3b\u8981\u662f\u7406\u8bba\u4e0a\u7684\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Uses only vertical cuts in the divide-and-conquer algorithm.  By default, Triangle alternates between vertical and horizontal cuts, which usually improve the speed except with vertex sets that are small or short and wide.  This switch is primarily of theoretical interest."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-s-\u5206\u6bb5\u5206\u5272",children:"-s \u5206\u6bb5\u5206\u5272"}),"\n",(0,s.jsx)(n.p,{children:"\u6307\u5b9a\uff1a\u901a\u8fc7\u5728\u7ebf\u6bb5\u7684\u4e2d\u70b9\u9012\u5f52\u5206\u5272\u7ebf\u6bb5\uff0c\u800c\u4e0d\u662f\u751f\u6210\u53d7\u7ea6\u675f\u7684Delaunay\u4e09\u89d2\u5256\u5206\uff0c\u5bf9\u7ebf\u6bb5\u5f3a\u5236\u5e94\u7528\u4e8e\u4e09\u89d2\u5256\u5206\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u5206\u6bb5\u5206\u5272\u7b26\u5408Ruppert\u7684\u539f\u59cb\u7b97\u6cd5\uff0c\u4f46\u53ef\u80fd\u4f1a\u521b\u5efa\u4e0d\u5fc5\u8981\u7684\u5c0f\u4e09\u89d2\u5f62\u3002\u8fd9\u79cd\u8f6c\u53d8\u4e3b\u8981\u662f\u7406\u8bba\u4e0a\u7684\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Specifies that segments should be forced into the triangulation by recursively splitting them at their midpoints, rather than by generating a constrained Delaunay triangulation.  Segment splitting is true to Ruppert's original algorithm, but can create needlessly small triangles.  This switch is primarily of theoretical interest."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-c-\u7f51\u683c\u4e00\u81f4\u6027",children:"-C \u7f51\u683c\u4e00\u81f4\u6027"}),"\n",(0,s.jsxs)(n.p,{children:["\u68c0\u67e5\u6700\u7ec8\u7f51\u683c\u7684\u4e00\u81f4\u6027\u3002\u4f7f\u7528\u7cbe\u786e\u7684\u7b97\u672f\u8fdb\u884c\u68c0\u67e5\uff0c\u5373\u4f7f\u4f7f\u7528\u4e86",(0,s.jsx)(n.code,{children:"-X"}),"\u964d\u4f4e\u7b97\u6cd5\u7cbe\u5ea6\u4e5f\u4e0d\u4f1a\u5f71\u50cf\u7f51\u683c\u4e00\u81f4\u6027\u68c0\u67e5\u7684\u7cbe\u5ea6\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Check the consistency of the final mesh.  Uses exact arithmetic for checking, even if the -X switch is used.  Useful if you suspect Triangle is buggy."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-q-\u9759\u9ed8\u6a21\u5f0f",children:"-Q \u9759\u9ed8\u6a21\u5f0f"}),"\n",(0,s.jsx)(n.p,{children:"\u4e0d\u6253\u5370\u4efb\u4f55\u4e2d\u95f4\u4fe1\u606f\uff0c\u9664\u975e\u62a5\u9519\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Quiet: Suppresses all explanation of what Triangle is doing, unless an error occurs."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-v-\u8be6\u60c5",children:"-V \u8be6\u60c5"}),"\n",(0,s.jsxs)(n.p,{children:["\u6253\u5370Triangle\u6267\u884c\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-V"}),"\u53ef\u4ee5\u6253\u5370\u7b97\u6cd5\u8fdb\u5c55\u7684\u4fe1\u606f\u548c\u66f4\u8be6\u7ec6\u7684\u7edf\u8ba1\u6570\u636e\uff1b\u4f7f\u7528",(0,s.jsx)(n.code,{children:"-VV"}),"\u53ef\u4ee5\u6253\u5370\u9010\u9876\u70b9\u7684\u7ec6\u8282\uff0c\u4f46\u6253\u5370\u8fc7\u591a\u4fe1\u606f\u4e5f\u4f1a\u964d\u4f4e\u8f6f\u4ef6\u8fd0\u884c\u901f\u5ea6\uff1b",(0,s.jsx)(n.code,{children:"-VVVV"}),"\u63d0\u4f9b\u4e86\u8c03\u8bd5\u4eba\u5458\u6240\u9700\u7684\u4fe1\u606f\u3002"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Verbose:  Gives detailed information about what Triangle is doing. Add more V's for increasing amount of detail.  -V is most useful; itgives information on algorithmic progress and much more detailed statistics.  -VV gives vertex-by-vertex details, and prints so much that Triangle runs much more slowly.  -VVVV gives information only a debugger could love."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u5b9a\u4e49",children:"\u5b9a\u4e49"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"\u4ee5\u540e\u6709\u7a7a\u518d\u6162\u6162\u7ffb\u8bd1\u5427..."})}),"\n",(0,s.jsx)(n.p,{children:"Definitions:"}),"\n",(0,s.jsx)(n.p,{children:"A Delaunay triangulation of a vertex set is a triangulation whose vertices are the vertex set, that covers the convex hull of the vertex set.  A Delaunay triangulation has the property that no vertex lies inside the circumscribing circle (circle that passes through all three vertices) of any triangle in the triangulation."}),"\n",(0,s.jsx)(n.p,{children:"A Voronoi diagram of a vertex set is a subdivision of the plane into polygonal cells (some of which may be unbounded, meaning infinitely large), where each cell is the set of points in the plane that are closer to some input vertex than to any other input vertex.  The Voronoi diagram is a geometric dual of the Delaunay triangulation."}),"\n",(0,s.jsx)(n.p,{children:"A Planar Straight Line Graph (PSLG) is a set of vertices and segments. Segments are simply edges, whose endpoints are all vertices in the PSLG. Segments may intersect each other only at their endpoints.  The file format for PSLGs (.poly files) is described below."}),"\n",(0,s.jsx)(n.p,{children:"A constrained Delaunay triangulation (CDT) of a PSLG is similar to a Delaunay triangulation, but each PSLG segment is present as a single edge of the CDT.  (A constrained Delaunay triangulation is not truly a Delaunay triangulation, because some of its triangles might not be Delaunay.)  By definition, a CDT does not have any vertices other than those specified in the input PSLG.  Depending on context, a CDT might cover the convex hull of the PSLG, or it might cover only a segment-bounded region (e.g. a polygon)."}),"\n",(0,s.jsx)(n.p,{children:"A conforming Delaunay triangulation of a PSLG is a triangulation in which each triangle is truly Delaunay, and each PSLG segment is represented by a linear contiguous sequence of edges of the triangulation.  New vertices (not part of the PSLG) may appear, and each input segment may have been subdivided into shorter edges (subsegments) by these additional vertices. The new vertices are frequently necessary to maintain the Delaunay property while ensuring that every segment is represented."}),"\n",(0,s.jsx)(n.p,{children:"A conforming constrained Delaunay triangulation (CCDT) of a PSLG is a triangulation of a PSLG whose triangles are constrained Delaunay.  New vertices may appear, and input segments may be subdivided into subsegments, but not to guarantee that segments are respected; rather, to improve the quality of the triangles.  The high-quality meshes produced by the -q switch are usually CCDTs, but can be made conforming Delaunay with the -D switch."}),"\n",(0,s.jsx)(n.h3,{id:"\u6587\u4ef6\u7c7b\u578b",children:"\u6587\u4ef6\u7c7b\u578b"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"\u8f6f\u4ef6\u5f00\u53d1\u4e0d\u6d89\u53ca\u6587\u4ef6\u683c\u5f0f\u8bf4\u660e, \u6240\u4ee5\u5c31\u4e0d\u518d\u7ec6\u770b\u4e86"})}),"\n",(0,s.jsx)(n.p,{children:"File Formats:"}),"\n",(0,s.jsx)(n.h4,{id:"\u901a\u7528\u683c\u5f0f\u8bf4\u660e",children:"\u901a\u7528\u683c\u5f0f\u8bf4\u660e"}),"\n",(0,s.jsxs)(n.p,{children:["\u6240\u6709\u6587\u4ef6\u90fd\u53ef\u4ee5\u4f7f\u7528",(0,s.jsx)(n.code,{children:"#"}),"\u7b26\u53f7\u4f5c\u4e3a\u6ce8\u91ca\u6807\u8bc6\u3002"]}),"\n",(0,s.jsx)(n.p,{children:"\u9876\u70b9(vertices)\u3001\u4e09\u89d2\u5f62(triangle)\u3001\u8fb9(edge)\u3001\u5b54(hole)\u3001\u6700\u5927\u9762\u79ef\u7ea6\u675f(maximum area constraints)\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5185\u7684\u4fe1\u606f\u90fd\u5fc5\u987b\u4fdd\u8bc1\u7d22\u5f15\u53f7\u7801\u8fde\u7eed, \u7f16\u53f7\u4ece0\u62161\u5f00\u59cb, \u5e76\u4e14\u6240\u6709\u6587\u4ef6\u5e94\u4f7f\u7528\u540c\u4e00\u4e2a\u6807\u51c6\u3002"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"All files may contain comments prefixed by the character '#'.  Vertices, triangles, edges, holes, and maximum area constraints must be numbered consecutively, starting from either 1 or 0.  Whichever you choose, all input files must be consistent; if the vertices are numbered from 1, so must be all other objects.  Triangle automatically detects your choice while reading the .node (or .poly) file.  (When calling Triangle from another program, use the -z switch if you wish to number objects from zero.)  Examples of these file formats are given below."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"\u6587\u4ef6\u8bf4\u660e",children:"\u6587\u4ef6\u8bf4\u660e"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  .node files:\r\n    First line:  <# of vertices> <dimension (must be 2)> <# of attributes> <# of boundary markers (0 or 1)>\r\n    Remaining lines:  <vertex #> <x> <y> [attributes] [boundary marker]\n"})}),"\n",(0,s.jsx)(n.p,{children:"The attributes, which are typically floating-point values of physical quantities (such as mass or conductivity) associated with the nodes of a finite element mesh, are copied unchanged to the output mesh.  If -q, -a, -u, -D, or -s is selected, each new Steiner point added to the mesh has attributes assigned to it by linear interpolation."}),"\n",(0,s.jsx)(n.p,{children:"If the fourth entry of the first line is '1', the last column of the remainder of the file is assumed to contain boundary markers.  Boundary markers are used to identify boundary vertices and vertices resting on PSLG segments; a complete description appears in a section below.  The .node file produced by Triangle contains boundary markers in the last column unless they are suppressed by the -B switch."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  .ele files:\r\n    First line:  <# of triangles> <nodes per triangle> <# of attributes>\r\n    Remaining lines:  <triangle #> <node> <node> <node> ... [attributes]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Nodes are indices into the corresponding .node file.  The first three nodes are the corner vertices, and are listed in counterclockwise order around each triangle.  (The remaining nodes, if any, depend on the type of finite element used.)"}),"\n",(0,s.jsx)(n.p,{children:"The attributes are just like those of .node files.  Because there is no simple mapping from input to output triangles, Triangle attempts to interpolate attributes, and may cause a lot of diffusion of attributes among nearby triangles as the triangulation is refined.  Attributes do not diffuse across segments, so attributes used to identify segment-bounded regions remain intact."}),"\n",(0,s.jsx)(n.p,{children:"In .ele files produced by Triangle, each triangular element has three nodes (vertices) unless the -o2 switch is used, in which case subparametric quadratic elements with six nodes each are generated. The first three nodes are the corners in counterclockwise order, and the fourth, fifth, and sixth nodes lie on the midpoints of the edges opposite the first, second, and third vertices, respectively."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  .poly files:\r\n    First line:  <# of vertices> <dimension (must be 2)> <# of attributes> <# of boundary markers (0 or 1)>\r\n    Following lines:  <vertex #> <x> <y> [attributes] [boundary marker]\r\n    One line:  <# of segments> <# of boundary markers (0 or 1)>\r\n    Following lines:  <segment #> <endpoint> <endpoint> [boundary marker]\r\n    One line:  <# of holes>\r\n    Following lines:  <hole #> <x> <y>\r\n    Optional line:  <# of regional attributes and/or area constraints>\r\n    Optional following lines:  <region #> <x> <y> <attribute> <max area>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A .poly file represents a PSLG, as well as some additional information. The first section lists all the vertices, and is identical to the format of .node files.  ",(0,s.jsx)(n.code,{children:"<# of vertices>"})," may be set to zero to indicate that the vertices are listed in a separate .node file; .poly files produced by Triangle always have this format.  A vertex set represented this way has the advantage that it may easily be triangulated with or without segments (depending on whether the -p switch is invoked)."]}),"\n",(0,s.jsx)(n.p,{children:"The second section lists the segments.  Segments are edges whose presence in the triangulation is enforced.  (Depending on the choice of switches, segment might be subdivided into smaller edges).  Each segment is specified by listing the indices of its two endpoints.  This means that you must include its endpoints in the vertex list.  Each segment, like each point, may have a boundary marker."}),"\n",(0,s.jsx)(n.p,{children:"If -q, -a, -u, and -s are not selected, Triangle produces a constrained Delaunay triangulation (CDT), in which each segment appears as a single edge in the triangulation.  If -q, -a, -u, or -s is selected, Triangle produces a conforming constrained Delaunay triangulation (CCDT), in which segments may be subdivided into smaller edges.  If -D is selected, Triangle produces a conforming Delaunay triangulation, so that every triangle is Delaunay, and not just constrained Delaunay."}),"\n",(0,s.jsx)(n.p,{children:"The third section lists holes (and concavities, if -c is selected) in the triangulation.  Holes are specified by identifying a point inside each hole.  After the triangulation is formed, Triangle creates holes by eating triangles, spreading out from each hole point until its progress is blocked by segments in the PSLG.  You must be careful to enclose each hole in segments, or your whole triangulation might be eaten away.  If the two triangles abutting a segment are eaten, the segment itself is also eaten.  Do not place a hole directly on a segment; if you do, Triangle chooses one side of the segment arbitrarily."}),"\n",(0,s.jsx)(n.p,{children:"The optional fourth section lists regional attributes (to be assigned to all triangles in a region) and regional constraints on the maximum triangle area.  Triangle reads this section only if the -A switch is used or the -a switch is used without a number following it, and the -r switch is not used.  Regional attributes and area constraints are propagated in the same manner as holes:  you specify a point for each attribute and/or constraint, and the attribute and/or constraint affects the whole region (bounded by segments) containing the point. If two values are written on a line after the x and y coordinate, the first such value is assumed to be a regional attribute (but is only applied if the -A switch is selected), and the second value is assumed to be a regional area constraint (but is only applied if the -a switch is selected).  You may specify just one value after the coordinates, which can serve as both an attribute and an area constraint, depending on the choice of switches.  If you are using the -A and -a switches simultaneously and wish to assign an attribute to some region without imposing an area constraint, use a negative maximum area."}),"\n",(0,s.jsx)(n.p,{children:"When a triangulation is created from a .poly file, you must either enclose the entire region to be triangulated in PSLG segments, or use the -c switch, which automatically creates extra segments that enclose the convex hull of the PSLG.  If you do not use the -c switch, Triangle eats all triangles that are not enclosed by segments; if you are not careful, your whole triangulation may be eaten away.  If you do use the -c switch, you can still produce concavities by the appropriate placement of holes just inside the boundary of the convex hull."}),"\n",(0,s.jsx)(n.p,{children:"An ideal PSLG has no intersecting segments, nor any vertices that lie upon segments (except, of course, the endpoints of each segment).  You aren't required to make your .poly files ideal, but you should be aware of what can go wrong.  Segment intersections are relatively safe-- Triangle calculates the intersection points for you and adds them to the triangulation--as long as your machine's floating-point precision doesn't become a problem.  You are tempting the fates if you have three segments that cross at the same location, and expect Triangle to figure out where the intersection point is.  Thanks to floating-point roundoff error, Triangle will probably decide that the three segments intersect at three different points, and you will find a minuscule triangle in your output--unless Triangle tries to refine the tiny triangle, uses up the last bit of machine precision, and fails to terminate at all. You're better off putting the intersection point in the input files, and manually breaking up each segment into two.  Similarly, if you place a vertex at the middle of a segment, and hope that Triangle will break up the segment at that vertex, you might get lucky.  On the other hand, Triangle might decide that the vertex doesn't lie precisely on the segment, and you'll have a needle-sharp triangle in your output--or a lot of tiny triangles if you're generating a quality mesh."}),"\n",(0,s.jsx)(n.p,{children:"When Triangle reads a .poly file, it also writes a .poly file, which includes all the subsegments--the edges that are parts of input segments.  If the -c switch is used, the output .poly file also includes all of the edges on the convex hull.  Hence, the output .poly file is useful for finding edges associated with input segments and for setting boundary conditions in finite element simulations.  Moreover, you will need the output .poly file if you plan to refine the output mesh, and don't want segments to be missing in later triangulations."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  .area files:\r\n    First line:  <# of triangles>\r\n    Following lines:  <triangle #> <maximum area>\n"})}),"\n",(0,s.jsx)(n.p,{children:"An .area file associates with each triangle a maximum area that is used for mesh refinement.  As with other file formats, every triangle must be represented, and the triangles must be numbered consecutively.  A triangle may be left unconstrained by assigning it a negative maximum area."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  .edge files:\r\n    First line:  <# of edges> <# of boundary markers (0 or 1)>\r\n    Following lines:  <edge #> <endpoint> <endpoint> [boundary marker]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Endpoints are indices into the corresponding .node file.  Triangle can produce .edge files (use the -e switch), but cannot read them.  The optional column of boundary markers is suppressed by the -B switch."}),"\n",(0,s.jsx)(n.p,{children:"In Voronoi diagrams, one also finds a special kind of edge that is an infinite ray with only one endpoint.  For these edges, a different format is used:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"        <edge #> <endpoint> -1 <direction x> <direction y>\n"})}),"\n",(0,s.jsx)(n.p,{children:"The 'direction' is a floating-point vector that indicates the direction of the infinite ray."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"  .neigh files:\r\n    First line:  <# of triangles> <# of neighbors per triangle (always 3)>\r\n    Following lines:  <triangle #> <neighbor> <neighbor> <neighbor>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Neighbors are indices into the corresponding .ele file.  An index of -1 indicates no neighbor (because the triangle is on an exterior boundary).  The first neighbor of triangle i is opposite the first corner of triangle i, and so on."}),"\n",(0,s.jsx)(n.p,{children:"Triangle can produce .neigh files (use the -n switch), but cannot read them."}),"\n",(0,s.jsx)(n.p,{children:"Boundary Markers:"}),"\n",(0,s.jsx)(n.p,{children:"Boundary markers are tags used mainly to identify which output vertices and edges are associated with which PSLG segment, and to identify which vertices and edges occur on a boundary of the triangulation.  A common use is to determine where boundary conditions should be applied to a finite element mesh.  You can prevent boundary markers from being written into files produced by Triangle by using the -B switch."}),"\n",(0,s.jsx)(n.p,{children:"The boundary marker associated with each segment in an output .poly file and each edge in an output .edge file is chosen as follows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If an output edge is part or all of a PSLG segment with a nonzero\r\nboundary marker, then the edge is assigned the same marker."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, if the edge lies on a boundary of the triangulation\r\n(even the boundary of a hole), then the edge is assigned the marker\r\none (1)."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, the edge is assigned the marker zero (0).\r\nThe boundary marker associated with each vertex in an output .node file is chosen as follows:"}),"\n",(0,s.jsx)(n.li,{children:"If a vertex is assigned a nonzero boundary marker in the input file,\r\nthen it is assigned the same marker in the output .node file."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, if the vertex lies on a PSLG segment (even if it is an\r\nendpoint of the segment) with a nonzero boundary marker, then the\r\nvertex is assigned the same marker.  If the vertex lies on several\r\nsuch segments, one of the markers is chosen arbitrarily."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, if the vertex occurs on a boundary of the triangulation,\r\nthen the vertex is assigned the marker one (1)."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, the vertex is assigned the marker zero (0)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"If you want Triangle to determine for you which vertices and edges are on the boundary, assign them the boundary marker zero (or use no markers at all) in your input files.  In the output files, all boundary vertices, edges, and segments will be assigned the value one."}),"\n",(0,s.jsx)(n.p,{children:"Triangulation Iteration Numbers:"}),"\n",(0,s.jsx)(n.p,{children:"Because Triangle can read and refine its own triangulations, input and output files have iteration numbers.  For instance, Triangle might read the files mesh.3.node, mesh.3.ele, and mesh.3.poly, refine the triangulation, and output the files mesh.4.node, mesh.4.ele, and mesh.4.poly.  Files with no iteration number are treated as if their iteration number is zero; hence, Triangle might read the file points.node, triangulate it, and produce the files points.1.node and points.1.ele."}),"\n",(0,s.jsx)(n.p,{children:"Iteration numbers allow you to create a sequence of successively finer meshes suitable for multigrid methods.  They also allow you to produce a sequence of meshes using error estimate-driven mesh refinement."}),"\n",(0,s.jsx)(n.p,{children:"If you're not using refinement or quality meshing, and you don't like iteration numbers, use the -I switch to disable them.  This switch also disables output of .node and .poly files to prevent your input files from being overwritten.  (If the input is a .poly file that contains its own points, a .node file is written.  This can be quite convenient for computing CDTs or quality meshes.)"}),"\n",(0,s.jsx)(n.p,{children:"Examples of How to Use Triangle:"}),"\n",(0,s.jsx)(n.p,{children:"'triangle dots' reads vertices from dots.node, and writes their Delaunay triangulation to dots.1.node and dots.1.ele.  (dots.1.node is identical to dots.node.)  'triangle -I dots' writes the triangulation to dots.ele instead.  (No additional .node file is needed, so none is written.)"}),"\n",(0,s.jsx)(n.p,{children:"'triangle -pe object.1' reads a PSLG from object.1.poly (and possibly object.1.node, if the vertices are omitted from object.1.poly) and writes its constrained Delaunay triangulation to object.2.node and object.2.ele. The segments are copied to object.2.poly, and all edges are written to object.2.edge."}),"\n",(0,s.jsx)(n.p,{children:"'triangle -pq31.5a.1 object' reads a PSLG from object.poly (and possibly object.node), generates a mesh whose angles are all between 31.5 and 117 degrees and whose triangles all have areas of 0.1 or less, and writes the mesh to object.1.node and object.1.ele.  Each segment may be broken up into multiple subsegments; these are written to object.1.poly."}),"\n",(0,s.jsx)(n.p,{children:"Here is a sample file 'box.poly' describing a square with a square hole:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    # A box with eight vertices in 2D, no attributes, one boundary marker.\r\n    8 2 0 1\r\n     # Outer box has these vertices:\r\n     1   0 0   0\r\n     2   0 3   0\r\n     3   3 0   0\r\n     4   3 3   33     # A special marker for this vertex.\r\n     # Inner square has these vertices:\r\n     5   1 1   0\r\n     6   1 2   0\r\n     7   2 1   0\r\n     8   2 2   0\r\n    # Five segments with boundary markers.\r\n    5 1\r\n     1   1 2   5      # Left side of outer box.\r\n     # Square hole has these segments:\r\n     2   5 7   0\r\n     3   7 8   0\r\n     4   8 6   10\r\n     5   6 5   0\r\n    # One hole in the middle of the inner square.\r\n    1\r\n     1   1.5 1.5\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note that some segments are missing from the outer square, so you must use the '-c' switch.  After 'triangle -pqc box.poly', here is the output file 'box.1.node', with twelve vertices.  The last four vertices were added to meet the angle constraint.  Vertices 1, 2, and 9 have markers from segment 1.  Vertices 6 and 8 have markers from segment 4.  All the other vertices but 4 have been marked to indicate that they lie on a boundary."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    12  2  0  1\r\n       1    0   0      5\r\n       2    0   3      5\r\n       3    3   0      1\r\n       4    3   3     33\r\n       5    1   1      1\r\n       6    1   2     10\r\n       7    2   1      1\r\n       8    2   2     10\r\n       9    0   1.5    5\r\n      10    1.5   0    1\r\n      11    3   1.5    1\r\n      12    1.5   3    1\r\n    # Generated by triangle -pqc box.poly\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here is the output file 'box.1.ele', with twelve triangles."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"    12  3  0\r\n       1     5   6   9\r\n       2    10   3   7\r\n       3     6   8  12\r\n       4     9   1   5\r\n       5     6   2   9\r\n       6     7   3  11\r\n       7    11   4   8\r\n       8     7   5  10\r\n       9    12   2   6\r\n      10     8   7  11\r\n      11     5   1  10\r\n      12     8   4  12\r\n    # Generated by triangle -pqc box.poly\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here is the output file 'box.1.poly'.  Note that segments have been added to represent the convex hull, and some segments have been subdivided by newly added vertices.  Note also that ",(0,s.jsx)(n.code,{children:"<# of vertices>"})," is set to zero to indicate that the vertices should be read from the .node file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    0  2  0  1\r\n    12  1\r\n       1     1   9     5\r\n       2     5   7     1\r\n       3     8   7     1\r\n       4     6   8    10\r\n       5     5   6     1\r\n       6     3  10     1\r\n       7     4  11     1\r\n       8     2  12     1\r\n       9     9   2     5\r\n      10    10   1     1\r\n      11    11   3     1\r\n      12    12   4     1\r\n    1\r\n       1   1.5 1.5\r\n    # Generated by triangle -pqc box.poly\n"})}),"\n",(0,s.jsx)(n.p,{children:"Refinement and Area Constraints:"}),"\n",(0,s.jsx)(n.p,{children:"The -r switch causes a mesh (.node and .ele files) to be read and refined.  If the -p switch is also used, a .poly file is read and used to specify edges that are constrained and cannot be eliminated (although they can be subdivided into smaller edges) by the refinement process."}),"\n",(0,s.jsx)(n.p,{children:"When you refine a mesh, you generally want to impose tighter constraints. One way to accomplish this is to use -q with a larger angle, or -a followed by a smaller area than you used to generate the mesh you are refining.  Another way to do this is to create an .area file, which specifies a maximum area for each triangle, and use the -a switch (without a number following).  Each triangle's area constraint is applied to that triangle.  Area constraints tend to diffuse as the mesh is refined, so if there are large variations in area constraint between adjacent triangles, you may not get the results you want.  In that case, consider instead using the -u switch and writing a C procedure that determines which triangles are too large."}),"\n",(0,s.jsx)(n.p,{children:"If you are refining a mesh composed of linear (three-node) elements, the output mesh contains all the nodes present in the input mesh, in the same order, with new nodes added at the end of the .node file.  However, the refinement is not hierarchical: there is no guarantee that each output element is contained in a single input element.  Often, an output element can overlap two or three input elements, and some input edges are not present in the output mesh.  Hence, a sequence of refined meshes forms a hierarchy of nodes, but not a hierarchy of elements.  If you refine a mesh of higher-order elements, the hierarchical property applies only to the nodes at the corners of an element; the midpoint nodes on each edge are discarded before the mesh is refined."}),"\n",(0,s.jsx)(n.p,{children:"Maximum area constraints in .poly files operate differently from those in .area files.  A maximum area in a .poly file applies to the whole (segment-bounded) region in which a point falls, whereas a maximum area in an .area file applies to only one triangle.  Area constraints in .poly files are used only when a mesh is first generated, whereas area constraints in .area files are used only to refine an existing mesh, and are typically based on a posteriori error estimates resulting from a finite element simulation on that mesh."}),"\n",(0,s.jsx)(n.p,{children:"'triangle -rq25 object.1' reads object.1.node and object.1.ele, then refines the triangulation to enforce a 25 degree minimum angle, and then writes the refined triangulation to object.2.node and object.2.ele."}),"\n",(0,s.jsx)(n.p,{children:"'triangle -rpaa6.2 z.3' reads z.3.node, z.3.ele, z.3.poly, and z.3.area. After reconstructing the mesh and its subsegments, Triangle refines the mesh so that no triangle has area greater than 6.2, and furthermore the triangles satisfy the maximum area constraints in z.3.area.  No angle bound is imposed at all.  The output is written to z.4.node, z.4.ele, and z.4.poly."}),"\n",(0,s.jsxs)(n.p,{children:["The sequence ",(0,s.jsx)(n.code,{children:"triangle -qa1 x"}),", ",(0,s.jsx)(n.code,{children:"triangle -rqa.3 x.1"}),", ",(0,s.jsx)(n.code,{children:"triangle -rqa.1 x.2"})," creates a sequence of successively finer meshes x.1, x.2, and x.3, suitable for multigrid."]}),"\n",(0,s.jsx)(n.p,{children:"Convex Hulls and Mesh Boundaries:"}),"\n",(0,s.jsx)(n.p,{children:"If the input is a vertex set (not a PSLG), Triangle produces its convex hull as a by-product in the output .poly file if you use the -c switch. There are faster algorithms for finding a two-dimensional convex hull than triangulation, of course, but this one comes for free."}),"\n",(0,s.jsx)(n.p,{children:"If the input is an unconstrained mesh (you are using the -r switch but not the -p switch), Triangle produces a list of its boundary edges (including hole boundaries) as a by-product when you use the -c switch. If you also use the -p switch, the output .poly file contains all the segments from the input .poly file as well."}),"\n",(0,s.jsx)(n.p,{children:"Voronoi Diagrams:"}),"\n",(0,s.jsx)(n.p,{children:"The -v switch produces a Voronoi diagram, in files suffixed .v.node and .v.edge.  For example, 'triangle -v points' reads points.node, produces its Delaunay triangulation in points.1.node and points.1.ele, and produces its Voronoi diagram in points.1.v.node and points.1.v.edge.  The .v.node file contains a list of all Voronoi vertices, and the .v.edge file contains a list of all Voronoi edges, some of which may be infinite rays.  (The choice of filenames makes it easy to run the set of Voronoi vertices through Triangle, if so desired.)"}),"\n",(0,s.jsx)(n.p,{children:"This implementation does not use exact arithmetic to compute the Voronoi vertices, and does not check whether neighboring vertices are identical. Be forewarned that if the Delaunay triangulation is degenerate or near-degenerate, the Voronoi diagram may have duplicate vertices or crossing edges."}),"\n",(0,s.jsx)(n.p,{children:"The result is a valid Voronoi diagram only if Triangle's output is a true Delaunay triangulation.  The Voronoi output is usually meaningless (and may contain crossing edges and other pathology) if the output is a CDT or CCDT, or if it has holes or concavities.  If the triangulated domain is convex and has no holes, you can use -D switch to force Triangle to construct a conforming Delaunay triangulation instead of a CCDT, so the Voronoi diagram will be valid."}),"\n",(0,s.jsx)(n.p,{children:"Mesh Topology:"}),"\n",(0,s.jsx)(n.p,{children:"You may wish to know which triangles are adjacent to a certain Delaunay edge in an .edge file, which Voronoi cells are adjacent to a certain Voronoi edge in a .v.edge file, or which Voronoi cells are adjacent to each other.  All of this information can be found by cross-referencing output files with the recollection that the Delaunay triangulation and the Voronoi diagram are planar duals."}),"\n",(0,s.jsx)(n.p,{children:"Specifically, edge i of an .edge file is the dual of Voronoi edge i of the corresponding .v.edge file, and is rotated 90 degrees counterclock- wise from the Voronoi edge.  Triangle j of an .ele file is the dual of vertex j of the corresponding .v.node file.  Voronoi cell k is the dual of vertex k of the corresponding .node file."}),"\n",(0,s.jsx)(n.p,{children:"Hence, to find the triangles adjacent to a Delaunay edge, look at the vertices of the corresponding Voronoi edge.  If the endpoints of a Voronoi edge are Voronoi vertices 2 and 6 respectively, then triangles 2 and 6 adjoin the left and right sides of the corresponding Delaunay edge, respectively.  To find the Voronoi cells adjacent to a Voronoi edge, look at the endpoints of the corresponding Delaunay edge.  If the endpoints of a Delaunay edge are input vertices 7 and 12, then Voronoi cells 7 and 12 adjoin the right and left sides of the corresponding Voronoi edge, respectively.  To find which Voronoi cells are adjacent to each other, just read the list of Delaunay edges."}),"\n",(0,s.jsx)(n.p,{children:"Triangle does not write a list of the edges adjoining each Voronoi cell, but you can reconstructed it straightforwardly.  For instance, to find all the edges of Voronoi cell 1, search the output .edge file for every edge that has input vertex 1 as an endpoint.  The corresponding dual edges in the output .v.edge file form the boundary of Voronoi cell 1."}),"\n",(0,s.jsx)(n.p,{children:"For each Voronoi vertex, the .neigh file gives a list of the three Voronoi vertices attached to it.  You might find this more convenient than the .v.edge file."}),"\n",(0,s.jsx)(n.p,{children:"Quadratic Elements:"}),"\n",(0,s.jsx)(n.p,{children:"Triangle generates meshes with subparametric quadratic elements if the -o2 switch is specified.  Quadratic elements have six nodes per element, rather than three.  'Subparametric' means that the edges of the triangles are always straight, so that subparametric quadratic elements are geometrically identical to linear elements, even though they can be used with quadratic interpolating functions.  The three extra nodes of an element fall at the midpoints of the three edges, with the fourth, fifth, and sixth nodes appearing opposite the first, second, and third corners respectively."}),"\n",(0,s.jsx)(n.p,{children:"Domains with Small Angles:"}),"\n",(0,s.jsx)(n.p,{children:"If two input segments adjoin each other at a small angle, clearly the -q switch cannot remove the small angle.  Moreover, Triangle may have no choice but to generate additional triangles whose smallest angles are smaller than the specified bound.  However, these triangles only appear between input segments separated by small angles.  Moreover, if you request a minimum angle of theta degrees, Triangle will generally produce no angle larger than 180 - 2 theta, even if it is forced to compromise on the minimum angle."}),"\n",(0,s.jsx)(n.p,{children:"Statistics:"}),"\n",(0,s.jsx)(n.p,{children:"After generating a mesh, Triangle prints a count of entities in the output mesh, including the number of vertices, triangles, edges, exterior boundary edges (i.e. subsegments on the boundary of the triangulation, including hole boundaries), interior boundary edges (i.e. subsegments of input segments not on the boundary), and total subsegments.  If you've forgotten the statistics for an existing mesh, run Triangle on that mesh with the -rNEP switches to read the mesh and print the statistics without writing any files.  Use -rpNEP if you've got a .poly file for the mesh."}),"\n",(0,s.jsx)(n.p,{children:"The -V switch produces extended statistics, including a rough estimate of memory use, the number of calls to geometric predicates, and histograms of the angles and the aspect ratios of the triangles in the mesh."}),"\n",(0,s.jsx)(n.p,{children:"Exact Arithmetic:"}),"\n",(0,s.jsx)(n.p,{children:"Triangle uses adaptive exact arithmetic to perform what computational geometers call the 'orientation' and 'incircle' tests.  If the floating- point arithmetic of your machine conforms to the IEEE 754 standard (as most workstations do), and does not use extended precision internal floating-point registers, then your output is guaranteed to be an absolutely true Delaunay or constrained Delaunay triangulation, roundoff error notwithstanding.  The word 'adaptive' implies that these arithmetic routines compute the result only to the precision necessary to guarantee correctness, so they are usually nearly as fast as their approximate counterparts."}),"\n",(0,s.jsx)(n.p,{children:"May CPUs, including Intel x86 processors, have extended precision floating-point registers.  These must be reconfigured so their precision is reduced to memory precision.  Triangle does this if it is compiled correctly.  See the makefile for details."}),"\n",(0,s.jsx)(n.p,{children:"The exact tests can be disabled with the -X switch.  On most inputs, this switch reduces the computation time by about eight percent--it's not worth the risk.  There are rare difficult inputs (having many collinear and cocircular vertices), however, for which the difference in speed could be a factor of two.  Be forewarned that these are precisely the inputs most likely to cause errors if you use the -X switch.  Hence, the -X switch is not recommended."}),"\n",(0,s.jsx)(n.p,{children:"Unfortunately, the exact tests don't solve every numerical problem. Exact arithmetic is not used to compute the positions of new vertices, because the bit complexity of vertex coordinates would grow without bound.  Hence, segment intersections aren't computed exactly; in very unusual cases, roundoff error in computing an intersection point might actually lead to an inverted triangle and an invalid triangulation. (This is one reason to specify your own intersection points in your .poly files.)  Similarly, exact arithmetic is not used to compute the vertices of the Voronoi diagram."}),"\n",(0,s.jsx)(n.p,{children:"Another pair of problems not solved by the exact arithmetic routines is underflow and overflow.  If Triangle is compiled for double precision arithmetic, I believe that Triangle's geometric predicates work correctly if the exponent of every input coordinate falls in the range [-148, 201]. Underflow can silently prevent the orientation and incircle tests from being performed exactly, while overflow typically causes a floating exception."}),"\n",(0,s.jsx)(n.p,{children:"Calling Triangle from Another Program:"}),"\n",(0,s.jsx)(n.p,{children:"Read the file triangle.h for details."}),"\n",(0,s.jsx)(n.p,{children:"Troubleshooting:"}),"\n",(0,s.jsx)(n.p,{children:"Please read this section before mailing me bugs."}),"\n",(0,s.jsx)(n.p,{children:"'My output mesh has no triangles!'"}),"\n",(0,s.jsx)(n.p,{children:"If you're using a PSLG, you've probably failed to specify a proper set of bounding segments, or forgotten to use the -c switch.  Or you may have placed a hole badly, thereby eating all your triangles.  To test these possibilities, try again with the -c and -O switches. Alternatively, all your input vertices may be collinear, in which case you can hardly expect to triangulate them."}),"\n",(0,s.jsx)(n.p,{children:"'Triangle doesn't terminate, or just crashes.'"}),"\n",(0,s.jsx)(n.p,{children:"Bad things can happen when triangles get so small that the distance between their vertices isn't much larger than the precision of your machine's arithmetic.  If you've compiled Triangle for single-precision arithmetic, you might do better by recompiling it for double-precision. Then again, you might just have to settle for more lenient constraints on the minimum angle and the maximum area than you had planned."}),"\n",(0,s.jsx)(n.p,{children:"You can minimize precision problems by ensuring that the origin lies inside your vertex set, or even inside the densest part of your mesh.  If you're triangulating an object whose x-coordinates all fall between 6247133 and 6247134, you're not leaving much floating-point precision for Triangle to work with."}),"\n",(0,s.jsx)(n.p,{children:"Precision problems can occur covertly if the input PSLG contains two segments that meet (or intersect) at an extremely small angle, or if such an angle is introduced by the -c switch.  If you don't realize that a tiny angle is being formed, you might never discover why Triangle is crashing.  To check for this possibility, use the -S switch (with an appropriate limit on the number of Steiner points, found by trial-and-error) to stop Triangle early, and view the output .poly file with Show Me (described below).  Look carefully for regions where dense clusters of vertices are forming and for small angles between segments. Zoom in closely, as such segments might look like a single segment from a distance."}),"\n",(0,s.jsx)(n.p,{children:"If some of the input values are too large, Triangle may suffer a floating exception due to overflow when attempting to perform an orientation or incircle test.  (Read the section on exact arithmetic above.)  Again, I recommend compiling Triangle for double (rather than single) precision arithmetic."}),"\n",(0,s.jsx)(n.p,{children:"Unexpected problems can arise if you use quality meshing (-q, -a, or -u) with an input that is not segment-bounded--that is, if your input is a vertex set, or you're using the -c switch.  If the convex hull of your input vertices has collinear vertices on its boundary, an input vertex that you think lies on the convex hull might actually lie just inside the convex hull.  If so, the vertex and the nearby convex hull edge form an extremely thin triangle.  When Triangle tries to refine the mesh to enforce angle and area constraints, Triangle might generate extremely tiny triangles, or it might fail because of insufficient floating-point precision."}),"\n",(0,s.jsx)(n.p,{children:"'The numbering of the output vertices doesn't match the input vertices.'"}),"\n",(0,s.jsx)(n.p,{children:"You may have had duplicate input vertices, or you may have eaten some of your input vertices with a hole, or by placing them outside the area enclosed by segments.  In any case, you can solve the problem by not using the -j switch."}),"\n",(0,s.jsx)(n.p,{children:"'Triangle executes without incident, but when I look at the resulting mesh, it has overlapping triangles or other geometric inconsistencies.'"}),"\n",(0,s.jsx)(n.p,{children:"If you select the -X switch, Triangle occasionally makes mistakes due to floating-point roundoff error.  Although these errors are rare, don't use the -X switch.  If you still have problems, please report the bug."}),"\n",(0,s.jsx)(n.p,{children:"'Triangle executes without incident, but when I look at the resulting Voronoi diagram, it has overlapping edges or other geometric inconsistencies.'"}),"\n",(0,s.jsx)(n.p,{children:"If your input is a PSLG (-p), you can only expect a meaningful Voronoi diagram if the domain you are triangulating is convex and free of holes, and you use the -D switch to construct a conforming Delaunay triangulation (instead of a CDT or CCDT)."}),"\n",(0,s.jsx)(n.p,{children:"Strange things can happen if you've taken liberties with your PSLG.  Do you have a vertex lying in the middle of a segment?  Triangle sometimes copes poorly with that sort of thing.  Do you want to lay out a collinear row of evenly spaced, segment-connected vertices?  Have you simply defined one long segment connecting the leftmost vertex to the rightmost vertex, and a bunch of vertices lying along it?  This method occasionally works, especially with horizontal and vertical lines, but often it doesn't, and you'll have to connect each adjacent pair of vertices with a separate segment.  If you don't like it, tough."}),"\n",(0,s.jsx)(n.p,{children:"Furthermore, if you have segments that intersect other than at their endpoints, try not to let the intersections fall extremely close to PSLG vertices or each other."}),"\n",(0,s.jsx)(n.p,{children:"If you have problems refining a triangulation not produced by Triangle: Are you sure the triangulation is geometrically valid?  Is it formatted correctly for Triangle?  Are the triangles all listed so the first three vertices are their corners in counterclockwise order?  Are all of the triangles constrained Delaunay?  Triangle's Delaunay refinement algorithm assumes that it starts with a CDT."}),"\n",(0,s.jsx)(n.p,{children:"A Brief Plea:"}),"\n",(0,s.jsxs)(n.p,{children:["If you use Triangle, and especially if you use it to accomplish real work, I would like very much to hear from you.  A short letter or email (to ",(0,s.jsx)(n.a,{href:"mailto:jrs@cs.berkeley.edu",children:"jrs@cs.berkeley.edu"}),") describing how you use Triangle will mean a lot to me.  The more people I know are using this program, the more easily I can justify spending time on improvements, which in turn will benefit you.  Also, I can put you on a list to receive email whenever a new version of Triangle is available."]}),"\n",(0,s.jsx)(n.p,{children:"If you use a mesh generated by Triangle in a publication, please include an acknowledgment as well.  And please spell Triangle with a capital 'T'! If you want to include a citation, use Jonathan Richard Shewchuk, ''Triangle: Engineering a 2D Quality Mesh Generator and Delaunay Triangulator,'' in Applied Computational Geometry:  Towards Geometric Engineering (Ming C. Lin and Dinesh Manocha, editors), volume 1148 of Lecture Notes in Computer Science, pages 203-222, Springer-Verlag, Berlin, May 1996.  (From the First ACM Workshop on Applied Computational Geometry.)'"})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);